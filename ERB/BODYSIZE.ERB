@SET_BODYSIZE(対象, セット位置 = 0)
#DIM 対象
#DIM セット位置

SIF GETBIT(セット位置, 0) || セット位置 == 0
	CALL SET_BODYSIZE_HEIGHT(対象)

SIF GETBIT(セット位置, 1) || セット位置 == 0
	CALL SET_BODYSIZE_BUST(対象)


;-------------------------
;身長の設定
;-------------------------
@SET_BODYSIZE_HEIGHT(対象)
#DIM 対象
#DIM 身長基礎値

MAXBASE:対象:身長 = CALC_BODYSIZE_HEIGHT(対象)
BASE:対象:身長 = MAXBASE:対象:身長


@CALC_BODYSIZE_HEIGHT(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値

;今のところ子供は未実装なのでコメントアウト
;IF CFLAG:対象:行動不能状態 == 行動不能_子供
;	基礎値 = MIN(500 + CFLAG:対象:子の成長度 * 20, 1300)
;ELSEIF TALENT:対象:幼児
;	基礎値 = MIN(800 + (CFLAG:対象:子の成長度 - 6) * 50, 1300)
;ELSE
	SELECTCASE TALENT:対象:体格
		CASE 体格_ハーヴィン並
			基礎値 = IS_MALE(対象) ? 800 # 700
			基礎値 += RAND:200
		CASE 体格_子供
			基礎値 = IS_MALE(対象) ? 1200 # 1100
			基礎値 += RAND:200
			SIF TALENT:対象:種族 == 種族_ドラフ && IS_FEMALE(対象)
				TIMES 基礎値, 0.90
		CASE 体格_小柄
			基礎値 = IS_MALE(対象) ? 1400 # 1300
			基礎値 += RAND:200
		CASE 体格_普通
			基礎値 = IS_MALE(対象) ? 1600 # 1500
			基礎値 += RAND:200
		CASE 体格_大柄
			基礎値 = IS_MALE(対象) ? 1950 + RAND:200 # 1800 + RAND:200
		CASE 体格_男ドラフ並
			基礎値 = IS_MALE(対象) ? 2150 + RAND:300 # 2000 + RAND:200
	ENDSELECT
;ENDIF

RETURNF 基礎値

;-------------------------
;バストサイズの設定
;-------------------------
@SET_BODYSIZE_BUST(対象)
#DIM 対象

BASE:対象:バスト = CALC_BODYSIZE_BUST(対象)
MAXBASE:対象:バスト = BASE:対象:バスト

@CALC_BODYSIZE_BUST(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値
#DIM 補正値

基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 52 # 53) / 100

IF IS_MALE(対象)
	補正値 = 85
ELSE
	SELECTCASE TALENT:対象:バストサイズ
		CASE IS <= -3
			補正値 = 85
		CASE -2
			補正値 = 88
		CASE -1
			補正値 = 95
		CASE 0
			補正値 = 100
		CASE 1
			補正値 = 105
		CASE 2
			補正値 = 110
		CASE 3
			補正値 = 120
		CASEELSE
			補正値 = 90 + TALENT:対象:バストサイズ * 10
	ENDSELECT
ENDIF

基礎値 = 基礎値 * 補正値 / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.18
	CASE 体格_子供
		IF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 1.05
		ELSE
			TIMES 基礎値, 1.06
		ENDIF
	CASE 体格_小柄
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.99
	CASE 体格_普通
	CASE 体格_大柄
		TIMES 基礎値, 1.01
	CASE 体格_男ドラフ並
		TIMES 基礎値, 1.02
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.90
	CASE 体型_細身
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.94
	CASE 体型_スレンダー
		SIF TALENT:対象:種族 != 種族_ドラフ || !HAS_VAGINA(対象)
			TIMES 基礎値, 0.97
	CASE 体型_グラマー
		TIMES 基礎値, 1.03
	CASE 体型_豊満
		TIMES 基礎値, 1.06
	CASE 体型_肥満
		TIMES 基礎値, 1.07
ENDSELECT

;ドラフのおっぱいにはロマンが詰まってるので補正
IF TALENT:対象:種族 == 種族_ドラフ && IS_FEMALE(対象)
	基礎値 = 基礎値 * RAND(113, 118) / 100
ELSE
	基礎値 = 基礎値 * RAND(97, 104) / 100
ENDIF

基礎値 = MAX(基礎値, CALC_BODYSIZE_UNDERBUST(対象) + 10)

RETURNF 基礎値

;-------------------------
;アンダーバストの算出
;-------------------------
@CALC_BODYSIZE_UNDERBUST(対象)
#FUNCTION
#DIM 対象
#DIM 基礎値
基礎値 = BASE:対象:身長 * (!HAS_VAGINA(対象) ? 50 # 43) / 100

SELECTCASE TALENT:対象:体格
	CASE 体格_ハーヴィン並
		TIMES 基礎値, 1.15
	CASE 体格_子供
		TIMES 基礎値, 1.05
	CASE 体格_小柄
		SIF TALENT:対象:種族 != 種族_ドラフ
			TIMES 基礎値, 0.95
	CASE 体格_普通
	CASE 体格_大柄
		TIMES 基礎値, 1.05
	CASE 体格_男ドラフ並
		TIMES 基礎値, 1.10
ENDSELECT

SELECTCASE TALENT:対象:体型
	CASE 体型_痩せすぎ
		TIMES 基礎値, 0.90
	CASE 体型_細身
		TIMES 基礎値, 0.94
	CASE 体型_スレンダー
		TIMES 基礎値, 0.97
	CASE 体型_グラマー
		TIMES 基礎値, 1.01
	CASE 体型_豊満
		TIMES 基礎値, 1.05
	CASE 体型_肥満
		TIMES 基礎値, 1.10
ENDSELECT

;夢詰め込んだらドラフカップが大きくなりすぎるので補正
SIF TALENT:対象:種族 == 種族_ドラフ && TALENT:対象:体格 >= 体格_小柄 && HAS_VAGINA(対象)
	基礎値 = 基礎値 * 110 / 100

RETURNF 基礎値

;-------------------------
;スリーサイズその他の表示
;-------------------------
@SHOW_BODYSIZE(対象)
#FUNCTIONS
#DIM 対象
LOCALS = 身長:%DECIMAL_STRING(BASE:対象:身長, 1), 6, RIGHT%cm/   B:%DECIMAL_STRING(BASE:対象:バスト, 1), 6, RIGHT%cm %GET_CUPSIZE(対象)%

RETURNF LOCALS

;バストのカップサイズ生成及び表示処理
@PRINT_CUPSIZE(対象)
#DIM 対象
PRINTFORM %GET_CUPSIZE(対象)%

;バストのカップサイズ生成処理
;ARGに0を指定しない限り、TALENT:バストサイズの範囲に収まるように返す
;-2=絶壁(AAA～AA) -1=貧乳(A～B) 0=並乳(C～D) 1=巨乳(E～F) 2=爆乳(G～I) 3=魔乳(J↑)
@GET_CUPSIZE(対象, ARG=1)
#FUNCTIONS
#DIM 対象
#DIMS CONST 表記 = "(-)","(AAA)","(AA)","(A)","(B)","(C)","(D)","(E)","(F)","(G)","(H)","(I)","(J)","(K)","(L)","(M)","(N)","(O)","(P)","(Q)","(R)","(S)","(T)","(U)","(V)","(W)","(X)","(Y)","(Z)","(Z+) "
#DIM CONST 補正 = 1, 2, 4, 6, 8, 11, 29

LOCAL = (BASE:対象:バスト - CALC_BODYSIZE_UNDERBUST(対象)) / 25

;文字列変数が若干不自由なので無理やり作成
LOCAL = MAX(LOCAL , 1)
;TALENTの表記に無理やり追従させる
SIF !ARG && 補正:(TALENT:対象:バストサイズ + 3) < LOCAL
	LOCAL = 補正:(TALENT:対象:バストサイズ + 3)
SIF !ARG && 補正:(TALENT:対象:バストサイズ + 2) + 1 > LOCAL
	LOCAL = 補正:(TALENT:対象:バストサイズ + 2) + 1

LOCALS:0 = %表記:(LOCAL)%

IF !HAS_VAGINA(対象)
	RETURNF "(--)"
ELSE
	RETURNF LOCALS:0
ENDIF

;-------------------------------------------------
;キャラ作成・初期化時にCSVの身長体重スリーサイズを反映するようにビットを建てる
;-------------------------------------------------
@SETBIT_PI(対象)
#FUNCTION
#DIM 対象
LOCAL = 0
SETBIT LOCAL, 0, 1, 2
SIF !EXISTCSV(NO:対象)
	RETURNF LOCAL

SIF CSVBASE(NO:対象, GETNUM(BASE, "身長")) && BASE:対象:身長
	CLEARBIT LOCAL, 0

SIF CSVBASE(NO:対象, GETNUM(BASE, "バスト")) && BASE:対象:バスト
	CLEARBIT LOCAL, 1

RETURNF LOCAL

;-------------------------------------------------
;整数ARG:0の下からARG:1番目に小数点を打ち、その値を文字列として返す関数
;-------------------------------------------------
@DECIMAL_STRING(ARG:0, ARG:1)
#FUNCTIONS
IF ARG:1 <= 0
	THROW "@DECIMAL_STRINGの二番目の引数に0以下の値が指定されました({ARG:1})"
ENDIF

LOCAL:4 = ARG:0

LOCAL:2 = POWER(10, ARG:1)
LOCAL:3 = LOCAL:4 / LOCAL:2
LOCAL:4 = LOCAL:4 - LOCAL:3 * LOCAL:2
LOCALS:0 = {LOCAL:3}.

FOR LOCAL:0, ARG:1 - 1, 0, -1
	LOCAL:2 = POWER(10, LOCAL:0)
	LOCAL:3 = LOCAL:4 / LOCAL:2
	LOCAL:4 = LOCAL:4 - LOCAL:3 * LOCAL:2
	LOCALS:0 = %LOCALS:0%{LOCAL:3}
NEXT
LOCALS:0 = %LOCALS:0%{LOCAL:4}
RETURNF LOCALS:0

;-------------------------------------------------
;キャラの身長・バスト・体型・体格をCSVと種族・性別を元に算出する関数
;ゲーム中に変動した場合を想定していないので、初期設定以外では呼び出さないこと
;-------------------------------------------------
@INIT_BODYSIZE(ARG)

IF ARG == 0
	DEBUGPRINTFORM 番号,%"名前", 16, LEFT%,%"身長", 8, LEFT%,%"バスト", 8, LEFT%,%"Uバスト", 8, LEFT%,%"ｶｯﾌﾟ", 5, LEFT%,%"素質：体格", 12, LEFT%,%"体型", 10, LEFT%,%"設定バストサイズ", 15, LEFT%
	FOR LOCAL, 0, 12
		DEBUGPRINTFORM ,%ERDNAME(知識素質, LOCAL)%
	NEXT
	DEBUGPRINTL
ENDIF

IF CSVBASE(NO:ARG, GETNUM(BASE, "身長")) && !BASE:ARG:身長
	BASE:ARG:身長 = CSVBASE(NO:ARG, GETNUM(BASE, "身長"))
	MAXBASE:ARG:身長 = BASE:ARG:身長
ENDIF

IF CSVBASE(NO:ARG, GETNUM(BASE, "バスト")) && !BASE:ARG:バスト
	BASE:ARG:バスト = CSVBASE(NO:ARG, GETNUM(BASE, "バスト"))
	MAXBASE:ARG:バスト = BASE:ARG:バスト
ENDIF


SIF CSVTALENT(NO:ARG, GETNUM(TALENT, "体格")) && TALENT:ARG:体格 != CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))
	TALENT:ARG:体格 = CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))

SIF CSVTALENT(NO:ARG, GETNUM(TALENT, "体型")) && TALENT:ARG:体型 != CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))
	TALENT:ARG:体型 = CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))


;CSVに体型、体格の記述が無い場合は身長と種族と性別をもとに算出する
IF !CSVTALENT(NO:ARG, GETNUM(TALENT, "体格"))
	;身長が存在する場合、そこから算出
	IF CSVBASE(NO:ARG, GETNUM(BASE, "身長"))
		SELECTCASE CSVBASE(NO:ARG, GETNUM(BASE, "身長"))
			CASE IS < 1000 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_ハーヴィン並
			CASE IS < 1300 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_子供
			CASE IS < 1500 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_小柄
			CASE IS < 1700 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_普通
			CASE IS < 1900 + IS_MALE(ARG)*100
				TALENT:ARG:体格 = 体格_大柄
			CASEELSE
				TALENT:ARG:体格 = 体格_男ドラフ並
		ENDSELECT 
	;ハーヴィンはハーヴィン並
	ELSEIF TALENT:ARG:種族 == 種族_ハーヴィン
		TALENT:ARG:体格 = 体格_ハーヴィン並
	ELSEIF TALENT:ARG:種族 == 種族_ドラフ
		;男性ドラフは男ドラフ並
		IF IS_MALE(ARG)
			TALENT:ARG:体格 = 体格_男ドラフ並
		;女性ドラフは小柄
		ELSE
			TALENT:ARG:体格 = 体格_小柄
		ENDIF
	ENDIF
ENDIF

IF CSVTALENT(NO:ARG, GETNUM(TALENT, "体型"))
	;男性ドラフはグラマー（肉感的）
	SIF TALENT:ARG:種族 == 種族_ドラフ && IS_MALE(ARG)
		TALENT:ARG:体型 = 体型_グラマー
ENDIF

;身長、バスト数値を決める
LOCAL = SETBIT_PI(ARG)
CALL SET_BODYSIZE(ARG, SETBIT_PI(ARG))


DEBUGPRINTFORM {NO:ARG, 4},%CALLNAME:ARG, 16, RIGHT%,%DECIMAL_STRING(BASE:ARG:身長, 1), 6, RIGHT%cm,%DECIMAL_STRING(BASE:ARG:バスト, 1), 6, RIGHT%cm,%DECIMAL_STRING(CALC_BODYSIZE_UNDERBUST(ARG), 1), 6, RIGHT%cm,%GET_CUPSIZE(ARG, 0), 5, LEFT%,%GET_TALENTNAME(GETNUM(TALENT,"体格"), TALENT:ARG:体格), 12%,%GET_TALENTNAME(GETNUM(TALENT,"体型"), TALENT:ARG:体型), 10%,%GET_TALENTNAME(GETNUM(TALENT,"バストサイズ"), TALENT:ARG:バストサイズ), 15%
FOR LOCAL, 0, 12
	DEBUGPRINTFORM ,{知識素質:ARG:LOCAL, STRLENS(ERDNAME(知識素質, LOCAL))}
NEXT
DEBUGPRINTL