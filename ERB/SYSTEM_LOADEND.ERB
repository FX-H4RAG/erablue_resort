

;-------------------------------------------------------------------------------------------
;ロードの後に実行される一連の処理
;主にキャラのCSVが前回プレイから新たに増えた時など
;-------------------------------------------------------------------------------------------

@SYSTEM_LOADEND
#DIM 追加キャラ保存, 100
#DIM 互換維持用変数, 100
#DIM 同行配列番号
#DIM L_C

#DIMS 比較用一時保存配列, 1000
#DIMS 素材名分割用, 2
#DIMS 同行キャラ文字列一時保存
#DIMS CSTR切り分け文字列格納, 2
VARSET 比較用一時保存配列
VARSET 同時モード_選択キャラ, -1

VARSET 追加キャラ保存
LOCAL:1 = 0

ダンジョン表示モード = 

;CSVを全部読んでキャラがADDってなければADDる
FOR LOCAL, 1, キャラクタ数上限
	SIF !EXISTCSV(LOCAL)
		CONTINUE
	SIF LOCAL == 999
		CONTINUE
	SIF GETCHARA(LOCAL) >= 0
		CONTINUE
	追加キャラ保存:(LOCAL:1) = CHARANUM
	ADDCHARA LOCAL
	LOCAL:1 += 1
NEXT

SIF LOCAL:1
	CALL コマンド存在チェック

FOR LOCAL, 0, LOCAL:1
	CALL キャラクター初期化(追加キャラ保存:LOCAL)
NEXT

;ロード時処理
FOR LOCAL, 0, CHARANUM
	TRYCALLFORM 口上側LOADENDパラメータ変更_{NO:LOCAL}
	SIF !BASE:LOCAL:身長
		CALL INIT_BODYSIZE(LOCAL)
	IF !RELATION_VAL:0:0 && FINDELEMENT(追加キャラ保存, LOCAL) < 0
		CALL SET_RELATION(LOCAL)
	ENDIF

	;追加同行キャラチェック
	同行キャラ文字列一時保存 = %CSVCSTR(NO:LOCAL, GETNUM(CSTR, "同行キャラ"))%
	VARSET LOCALS
	REPLACE 同行キャラ文字列一時保存, " ", ""
	SPLIT RESULTS, "%", LOCALS
	LOCAL:2 = RESULT - 1
	FOR LOCAL:10, 0, LOCAL:2
		VARSET CSTR切り分け文字列格納
		SPLIT LOCALS:(LOCAL:10), "_", CSTR切り分け文字列格納
		;無い場合のみ追加する
		IF FINDELEMENT(同行候補キャラ番号:LOCAL:0, FINDCHARA(NAME, CSTR切り分け文字列格納:0)) < 0
			;空いてる場所を検索して突っ込む
			同行配列番号 = FINDELEMENT(同行候補キャラ番号:LOCAL:0, 0)
			IF 同行配列番号 > 0
				同行候補キャラ番号:LOCAL:同行配列番号 = FINDCHARA(NAME, CSTR切り分け文字列格納:0)
				同行候補キャラ確率:LOCAL:同行配列番号 = TOINT(CSTR切り分け文字列格納:1)
			ENDIF
			L_C = FINDELEMENT(RELATION_NO:LOCAL:0, 0)
			IF L_C > 0
				RELATION_NO:LOCAL:L_C = 同行候補キャラ番号:LOCAL:同行配列番号
				RELATION_VAL:LOCAL:L_C += 同行候補キャラ確率:LOCAL:同行配列番号 * 100
			ENDIF
		ENDIF
	NEXT

	;固有ステータスチェック
	IF EXISTFUNCTION(@"戦闘初期ステータス設定_{NO:LOCAL}")
		;固有ステがあるのにステタイプが汎用なら修正
		IF 基礎BATTLE_STATE:LOCAL:ステータスタイプ保存 > -1
			CALLFORM 戦闘初期ステータス設定_{NO:LOCAL}(LOCAL)
			CALL レベルアップ処理(LOCAL)
			CALL 口上変数初期化
		ENDIF
	ENDIF
NEXT
SIF !RELATION_VAL:0:0
	RELATION_VAL:0:0 = 1
CALL 戦闘用データベースセット
CALL 従業員業務用マップセット
CALL 体位モードデータベースセット

ボタン化用カラーマトリクス:0:0 = 768,256,256,  0,  0
ボタン化用カラーマトリクス:1:0 = 256,768,256,  0,  0
ボタン化用カラーマトリクス:2:0 = 256,256,256,  0,  0
ボタン化用カラーマトリクス:3:0 =   0,  0,  0,256,  0
ボタン化用カラーマトリクス:4:0 =   0,  0,  0,  0,256

;------------------------------------------------------------------------------------------
;旧セーブとの互換のために入れる処理
;------------------------------------------------------------------------------------------

;追加TALENT、追加CSTRのチェック
FOR LOCAL, 1, CHARANUM
	SIF TCVAR:LOCAL:野外オナニー_残時間 == -1
		TCVAR:LOCAL:野外オナニー_残時間 = 0
	
	IF 陥落不可適用フラグ == 0
		SIF CSVTALENT(NO:LOCAL, GETNUM(TALENT, "陥落不可"))
			TALENT:LOCAL:陥落不可 = CSVTALENT(NO:LOCAL, GETNUM(TALENT, "陥落不可"))

		SIF CSVTALENT(NO:LOCAL, GETNUM(TALENT, "妊娠不可"))
			TALENT:LOCAL:妊娠不可 = CSVTALENT(NO:LOCAL, GETNUM(TALENT, "妊娠不可"))
	ENDIF
	;ここまで0.036で消す

	SIF TALENT:LOCAL:ランダムキャラ
		CFLAG:LOCAL:招待不可フラグ = 0

	SIF 発情期判定(LOCAL) == 0
		CFLAG:LOCAL:発情期フラグ = 0
	;ここまで0.037で消す
NEXT

CALL 写真データベースセット

ITEMSALES:70 = 10000

SIF ダンジョンクリアフラグ_名前を亡くした遺跡
	CALL イベント完了フラグ汎用処理("【条件確認】温泉を作るために")


FOR LOCAL, 0, DT_ROW_LENGTH("各イベント用変数配列")
	IF DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベントカテゴリ") == "ＥＸイベント"
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベントカテゴリ", "キャライベント"
	ENDIF
	IF DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベント名") == "未神宮への参拝"
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベントカテゴリ", "キャライベント"
	ENDIF
NEXT

IF DT_COLUMN_EXIST("各イベント用変数配列", "汎用イベ用_キャラNO保存") == 0
	DT_COLUMN_ADD "各イベント用変数配列", "汎用イベ用_キャラNO保存", 3
ENDIF

SIF DT_EXIST("所持乗機データベース") == 0
	CALL 乗機データベースセット
SIF DT_EXIST("所持兵器データベース") == 0
	CALL 所持兵器データベースセット

IF 指輪耳飾り衣装ID管理変更 == 0
	FOR LOCAL, 1, CHARANUM
		IF 装備ステータス補正保存:LOCAL:装備指輪番号
			LOCAL:1 = DT_CELL_GET("所持指輪データベース", 装備ステータス補正保存:LOCAL:装備指輪番号, "id")
			装備ステータス補正保存:LOCAL:装備指輪番号 = LOCAL:1
		ENDIF
		IF 装備ステータス補正保存:LOCAL:装備耳飾り番号
			LOCAL:1 = DT_CELL_GET("所持耳飾りデータベース", 装備ステータス補正保存:LOCAL:装備耳飾り番号, "id")
			装備ステータス補正保存:LOCAL:装備耳飾り番号 = LOCAL:1
		ENDIF
		IF 装備ステータス補正保存:LOCAL:装備衣装番号
			LOCAL:1 = DT_CELL_GET("所持衣装データベース", 装備ステータス補正保存:LOCAL:装備衣装番号, "id")
			装備ステータス補正保存:LOCAL:装備衣装番号 = LOCAL:1
		ENDIF
	NEXT
	指輪耳飾り衣装ID管理変更 = 1
ENDIF

IF イベ再発生対策 == 0
	FOR LOCAL, 0, DT_ROW_LENGTH("各イベント用変数配列")
		SIF DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベント名") == "魔物襲撃"
			CONTINUE
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベント再発生CT", 0
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベント再発生確率", 0
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベント消滅CT", 0
		DT_CELL_SET "各イベント用変数配列", LOCAL, "イベント消滅確率", 0
	NEXT
	イベ再発生対策 = 1
ENDIF

IF イベ名前被り対策 == 0
	VARSET LOCALS
	LOCAL:1 = 0
	FOR LOCAL, 0, DT_ROW_LENGTH("各イベント用変数配列")
		SIF DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベント名") == ""
			BREAK
		IF FINDELEMENT(LOCALS, ESCAPE(@"%DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベント名")%"), , , 1) > -1
			DT_ROW_REMOVE "各イベント用変数配列", DT_CELL_GET("各イベント用変数配列", LOCAL, "id")
			LOCAL -= 1
		ELSE
			LOCALS:(LOCAL:1) = %DT_CELL_GETS("各イベント用変数配列", LOCAL, "イベント名")%
			LOCAL:1 += 1
		ENDIF
	NEXT
	イベ名前被り対策 = 1
ENDIF

	CALL 制服登録処理("チャイナドレス")
	CALL 制服登録処理("ミニチャイナ")

IF バルツ乗機兵装フォロー == 0
	SIF GETBIT(ダンジョン構造配列_バルツ地下廃工場:23:7, 2)
		CALL 汎用搭載兵器取得処理_設計図("10mmバルカン砲")
	SIF GETBIT(ダンジョン構造配列_バルツ地下廃工場:25:5, 4)
		CALL 汎用搭載兵器取得処理("メタル・デストロイヤー")
	SIF GETBIT(ダンジョン構造配列_バルツ地下廃工場:10:5, 4)
		CALL 乗機取得処理_設計図("コロッサスレプリカ")
	IF GETBIT(ダンジョン構造配列_バルツ地下廃工場:26:4, 4)
		CALL 汎用搭載兵器取得処理("近接用ブレード")
		CALL 汎用搭載兵器取得処理_設計図("近接用ブレード")
	ENDIF

	バルツ乗機兵装フォロー = 1
ENDIF

;ここまで0.036にしたとき消す、互換を34に

;ここまで0.037にしたとき消す、互換を35に

;------------------------------------------------------------------------------------------
;ここまで互換のための処理
;------------------------------------------------------------------------------------------


FOR LOCAL, 1, CHARANUM
	;キャラ体力再計算
	CALL 体力変動素質適用処理(LOCAL)

	SIF CFLAG:LOCAL:滞在期間 < 0
		CONTINUE
	;部屋の無いキャラがいないかチェック
	IF キャラクター部屋検索(LOCAL) == -1 && CFLAG:LOCAL:スイートルーム滞在フラグ == 0
		IF TALENT:LOCAL:従業員
			FOR LOCAL:1, 0, 従業員キャラ上限
				IF 従業員部屋割り配列:(LOCAL:1) < 1
					従業員部屋割り配列:(LOCAL:1) = LOCAL
					CFLAG:LOCAL:現在マップ種別 = 999
					CFLAG:LOCAL:現在位置 = LOCAL:1 + 1000
					RETURN 1
				ENDIF
			NEXT
		ELSE
			CALL 滞在者部屋割り配列挿入処理(LOCAL)
		ENDIF
	ENDIF

	;複数の部屋に入っちゃってないかチェック
	LOCAL:2 = 0
	IF TALENT:LOCAL:従業員
		FOR LOCAL:1, 0, 従業員キャラ上限
			IF 従業員部屋割り配列:(LOCAL:1) == LOCAL
				IF LOCAL:2
					従業員部屋割り配列:(LOCAL:1) = 0
				ELSE
					LOCAL:2 = 1
				ENDIF
			ENDIF
		NEXT
	ELSE
		FOR LOCAL:1, 0, 100
			IF 滞在者部屋割り配列:(LOCAL:1) == LOCAL
				IF LOCAL:2
					滞在者部屋割り配列:(LOCAL:1) = 0
				ELSE
					LOCAL:2 = 1
				ENDIF
			ENDIF
		NEXT
	ENDIF

	;弱点コマンドの設定がされているかどうかチェック
	IF EXISTFUNCTION(@"弱点コマンド変更_{NO:LOCAL}")
		VARSET 弱点コマンド枠:LOCAL:0
		TRYCALLFORM 弱点コマンド変更_{NO:LOCAL}
	ENDIF

	;画像フォルダが有効かチェック
	CALL 画像フォルダ有効チェック(LOCAL)
NEXT

CALL イベント追加チェック
CALL イベント削除チェック
IF TFLAG:ゲームフェイズ管理 == 0
	CALL イベント発生条件チェック
ENDIF

;新しく素材アイテムが増えてないかチェック
CALL 素材アイテム登録処理

;念のため変数リセット
CALL TURN_RESET
CALL 最大レベル算出保存
