;-------------------------------------------------------------------------------------------
;系統リスト、競合など各モードが持っている処理をまとめる関数群
;-------------------------------------------------------------------------------------------
@MODE_部位届く判定(判定部位, 実行キャラ番号 = -1, 対象キャラ番号 = -1)
#DIM 配列番号
#DIM 判定部位
#DIM 実行キャラ番号
#DIM 対象キャラ番号
;実行キャラが対象キャラの指定部位に対して触れるかどうかを判定する

IF 実行キャラ番号 == -1
	実行キャラ番号 = PLAYER
ENDIF
IF 対象キャラ番号 == -1
	対象キャラ番号 = TARGET
ENDIF

;判定部位名をチェック
FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 実行キャラ番号 && DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 対象キャラ番号
		CALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%(判定部位, "ターゲット", 実行キャラ番号, 対象キャラ番号)
		SIF RESULT == 部位状況_届かない
			RETURN 0
	ENDIF
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 対象キャラ番号 && DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 実行キャラ番号
		CALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%(判定部位, "プレイヤー", 対象キャラ番号, 実行キャラ番号)
		SIF RESULT == 部位状況_届かない
			RETURN 0
	ENDIF
NEXT

RETURN 1


@MODE系統確認(モード名, 系統名)
#FUNCTION
#DIMS モード名
#DIMS 系統名
モード確認結果 = 0
TRYCALLFORMF 系統リスト_%系統名%(モード名)
RETURNF モード確認結果


@MODE_CHECK
;モードが持続している間、特定の快楽が発生し続ける
;すべてのモードをチェック
#DIM 配列番号

FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	TRYCALLFORM MODE_持続快楽_%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%(DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ"), DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ"))
NEXT

RETURN 1


@MODE_競合判定_プレイヤー(判定モード名, 判定配列番号, 実行キャラ番号, 対象キャラ番号, 指競合フラグ)
#DIMS 判定モード名
#DIM 判定配列番号
#DIM 部位番号
#DIM 実行キャラ番号
#DIM 対象キャラ番号
#DIM 判定側_プレイヤー部位状況
#DIM 存在側_部位状況
#DIM REF 指競合フラグ
;MODE_CHANGE(判定モード名, 実行キャラ番号, 対象キャラ番号)で追加する予定のモードに対し
;既存のモードの実行キャラの部位状況が競合しているかを確認する

;各モードがどの部位を専有しているかを持ってくる
FOR 部位番号, 0, 部位_要素数
	判定側_プレイヤー部位状況 = 0
	存在側_部位状況 = 0

	TRYCCALLFORM MODETYPE_%判定モード名%(部位番号, "プレイヤー", 実行キャラ番号, 対象キャラ番号)
		判定側_プレイヤー部位状況 = RESULT
	CATCH
		判定側_プレイヤー部位状況 = 0
	ENDCATCH
	IF DT_CELL_GET("体位モードデータベース", 判定配列番号, "実行キャラ") == 実行キャラ番号
		TRYCCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名")%(部位番号, "プレイヤー", 実行キャラ番号, 対象キャラ番号)
			存在側_部位状況 = RESULT
		CATCH
			存在側_部位状況 = 0
		ENDCATCH
	ELSEIF DT_CELL_GET("体位モードデータベース", 判定配列番号, "対象キャラ") == 実行キャラ番号
		TRYCCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名")%(部位番号, "ターゲット", 対象キャラ番号, 実行キャラ番号)
			存在側_部位状況 = RESULT
		CATCH
			存在側_部位状況 = 0
		ENDCATCH
	ENDIF

	;競合比較
	IF 判定側_プレイヤー部位状況 == 部位状況_占有 && 存在側_部位状況 == 部位状況_占有
		IF 部位番号 == 部位_指
			;指の場合は一旦指競合フラグを見る
			IF 指競合フラグ < 2
				;両手のどっちか空いてるなら次へ
				指競合フラグ ++
			ELSE
				;両手埋まってたら競合
				RETURN 1
			ENDIF
		ELSE
			;競合する
			RETURN 1
		ENDIF
	ENDIF
	IF 判定側_プレイヤー部位状況 != 部位状況_なし && 存在側_部位状況 != 部位状況_なし
		;実行対象の組み合わせが一致するなら競合する
		IF GROUPMATCH(対象キャラ番号, DT_CELL_GET("体位モードデータベース", 判定配列番号, "実行キャラ"), DT_CELL_GET("体位モードデータベース", 判定配列番号, "対象キャラ"))
			;例外処理
			IF MODE_競合除外(判定モード名, DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名"))
				RETURN 0
			ELSE
				RETURN 2
			ENDIF
		ENDIF
	ENDIF
NEXT

RETURN 0


@MODE_競合判定_ターゲット(判定モード名, 判定配列番号, 実行キャラ番号, 対象キャラ番号, 指競合フラグ)
#DIMS 判定モード名
#DIM 判定配列番号
#DIM 部位番号
#DIM 実行キャラ番号
#DIM 対象キャラ番号
#DIM 判定側_ターゲット部位状況
#DIM 存在側_部位状況
#DIM REF 指競合フラグ
;MODE_CHANGE(判定モード名, 実行キャラ番号, 対象キャラ番号)で追加する予定のモードに対し
;既存のモードの対象キャラの部位状況が競合しているかを確認する

;各モードがどの部位を専有しているかを持ってくる
FOR 部位番号, 0, 部位_要素数
	判定側_ターゲット部位状況 = 0
	存在側_部位状況 = 0

	TRYCCALLFORM MODETYPE_%判定モード名%(部位番号, "ターゲット", 実行キャラ番号, 対象キャラ番号)
		判定側_ターゲット部位状況 = RESULT
	CATCH
		判定側_ターゲット部位状況 = 0
	ENDCATCH
	IF DT_CELL_GET("体位モードデータベース", 判定配列番号, "実行キャラ") == 対象キャラ番号
		TRYCCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名")%(部位番号, "プレイヤー", 対象キャラ番号, 実行キャラ番号)
			存在側_部位状況 = RESULT
		CATCH
			存在側_部位状況 = 0
		ENDCATCH
	ELSEIF DT_CELL_GET("体位モードデータベース", 判定配列番号, "対象キャラ") == 対象キャラ番号
		TRYCCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名")%(部位番号, "ターゲット", 実行キャラ番号, 対象キャラ番号)
			存在側_部位状況 = RESULT
		CATCH
			存在側_部位状況 = 0
		ENDCATCH
	ENDIF

	;競合比較
	IF 判定側_ターゲット部位状況 == 部位状況_占有 && 存在側_部位状況 == 部位状況_占有
		IF 部位番号 == 部位_指
			;指の場合は一旦指競合フラグを見る
			IF 指競合フラグ < 2
				;両手のどっちか空いてるなら次へ
				指競合フラグ ++
			ELSE
				;両手埋まってたら競合
				RETURN 1
			ENDIF
		ELSE
			;競合する
			RETURN 1
		ENDIF
	ENDIF
	IF 判定側_ターゲット部位状況 != 部位状況_なし && 存在側_部位状況 != 部位状況_なし
		;実行対象の組み合わせが一致するなら競合する
		IF GROUPMATCH(実行キャラ番号, DT_CELL_GET("体位モードデータベース", 判定配列番号, "実行キャラ"), DT_CELL_GET("体位モードデータベース", 判定配列番号, "対象キャラ"))
			IF MODE_競合除外(判定モード名, DT_CELL_GETS("体位モードデータベース", 判定配列番号, "モード名"))
				RETURN 0
			ELSE
				RETURN 2
			ENDIF
		ENDIF
	ENDIF
NEXT

RETURN 0


@MODE_競合判定_3P用(判定モード名１, 判定モード名２)
#DIMS 判定モード名１
#DIMS 判定モード名２
#DIM 部位番号
#DIM 部位専有配列PLAYER１
#DIM 部位専有配列PLAYER２

;各モードがどの部位を専有しているかを持ってくる
;3P用のため、TARGET分は無し
FOR 部位番号, 0, 部位_要素数
	部位専有配列PLAYER１ = 0
	部位専有配列PLAYER２ = 0

	TRYCCALLFORM MODETYPE_%判定モード名１%(部位番号, "プレイヤー", -1, -1)
		部位専有配列PLAYER１ = RESULT
	CATCH
		部位専有配列PLAYER１ = 0
	ENDCATCH
	TRYCCALLFORM MODETYPE_%判定モード名２%(部位番号, "プレイヤー", -1, -1)
		部位専有配列PLAYER２ = RESULT
	CATCH
		部位専有配列PLAYER２ = 0
	ENDCATCH

	;競合比較
	SIF 部位専有配列PLAYER１ == 部位状況_占有 && 部位専有配列PLAYER２ == 部位状況_占有
		RETURN 1
NEXT

RETURN 0


@MODE_競合除外(判定モード, 競合モード)
#FUNCTION
#DIMS 判定モード
#DIMS 競合モード
;競合から除外する体位の組み合わせなら1を返す

;フェラorパイズリorパイズリフェラ同士なら除外
SIF GROUPMATCH(判定モード, "フェラチオ", "パイズリ", "パイズリフェラ") && GROUPMATCH(競合モード, "フェラチオ", "パイズリ", "パイズリフェラ")
	RETURNF 1
;自慰系は「届かない」の場合を無視する
SIF 系統リスト_自慰系(判定モード) || 系統リスト_自慰系(競合モード)
	RETURNF 1
;触手系は「届かない」の場合を無視する
SIF 系統リスト_触手系(判定モード) || 系統リスト_触手系(競合モード)
	RETURNF 1
;アイテム系は「届かない」の場合を無視する
SIF 系統リスト_アイテム系(判定モード) || 系統リスト_アイテム系(競合モード)
	RETURNF 1
