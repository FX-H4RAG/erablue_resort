;-------------------------------------------------------------------------------------------
;追加、削除など体位モードデータベースを操作する関数群
;-------------------------------------------------------------------------------------------
@MODE_DELETE_配列詰め(削除番号)
#DIM 削除番号

DT_ROW_REMOVE "体位モードデータベース", DT_CELL_GET("体位モードデータベース", 削除番号, "id")
CALL 部位専有再計算()


@MODE_DELETE_FROM_ID(削除ID)
#DIM 削除ID

DT_ROW_REMOVE "体位モードデータベース", 削除ID
CALL 部位専有再計算()


@MODE_DELETE_プレイヤー側(削除モード名, 判定キャラ番号 = -1)
#DIM 判定キャラ番号
#DIMS 削除モード名
#DIM 配列番号

IF 判定キャラ番号 == -1
	判定キャラ番号 = PLAYER
ENDIF

;判定モード名があるかどうかを見る
FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == ""
		BREAK
	;アイテム系はプレイヤー側の値は関係ないのでスルー
	SIF 系統リスト_アイテム系(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"))
		CONTINUE
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 判定キャラ番号
		IF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == 削除モード名
			CALL MODE_DELETE_配列詰め(配列番号)
			配列番号 -= 1
		ELSEIF MODE系統確認(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"), 削除モード名)
			CALL MODE_DELETE_配列詰め(配列番号)
			配列番号 -= 1
		ENDIF
	ENDIF
NEXT


@MODE_DELETE_ターゲット側(削除モード名, 判定キャラ番号 = -1)
#DIM 判定キャラ番号
#DIMS 削除モード名
#DIM 配列番号

IF 判定キャラ番号 == -1
	判定キャラ番号 = TARGET
ENDIF

;判定モード名があるかどうかを見る
FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == ""
		BREAK
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 判定キャラ番号
		IF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == 削除モード名
			CALL MODE_DELETE_配列詰め(配列番号)
			配列番号 -= 1
		ELSEIF MODE系統確認(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"), 削除モード名)
			CALL MODE_DELETE_配列詰め(配列番号)
			配列番号 -= 1
		ENDIF
	ENDIF
NEXT


@特定キャラモードリセット(対象キャラ番号)
#DIM 対象キャラ番号
#DIM 配列番号

SIF 対象キャラ番号 < 0
	RETURN -1

FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == ""
		BREAK
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 対象キャラ番号 || DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 対象キャラ番号
		CALL MODE_DELETE_配列詰め(配列番号)
		配列番号 -= 1
	ENDIF
NEXT


@MODE_CHANGE(実行モード名, 実行キャラ番号, 対象キャラ番号, フリー変数 = 0, フリー文字列 = "")
#DIM 対象キャラ番号
#DIM 実行キャラ番号
#DIMS 実行モード名
#DIM フリー変数
#DIMS フリー文字列
#DIM 配列番号
#DIM 例外配列
#DIM 指競合フラグ_プレイヤー
#DIM 指競合フラグ_ターゲット
#DIM 消去フラグ
#DIM 文字列表示フラグ
#DIM スキップフラグ
#DIM モードID

IF 実行モード名 != ""
	IF !初体験日:実行キャラ番号:実行モード名
		初体験日:実行キャラ番号:実行モード名 = DAY
		CALL 履歴データベース登録(CFLAG:実行キャラ番号:人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>初めて%CALLNAME:対象キャラ番号%に[%実行モード名%]をした</font>","うふふ")
		SIF GROUPMATCH(実行モード名, "キス", "ディープキス", "シックスナイン")
			初体験日:実行キャラ番号:(GETNUM(初体験日, 実行モード名) + 100) = DAY
	ENDIF
	IF !初体験日:対象キャラ番号:(GETNUM(初体験日, 実行モード名) + 100)
		初体験日:対象キャラ番号:(GETNUM(初体験日, 実行モード名) + 100) = DAY
		IF GROUPMATCH(実行モード名, "キス", "ディープキス", "シックスナイン")
			初体験日:対象キャラ番号:実行モード名 = DAY
			CALL 履歴データベース登録(CFLAG:対象キャラ番号:人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>初めて%CALLNAME:実行キャラ番号%に[%実行モード名%]をした</font>","うふふ")
		ELSEIF 系統リスト_自慰系(実行モード名)
			CALL 履歴データベース登録(CFLAG:対象キャラ番号:人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>初めてえっち中に[%実行モード名%]をした</font>","うふふ")
		ELSE
			CALL 履歴データベース登録(CFLAG:対象キャラ番号:人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>初めて%CALLNAME:実行キャラ番号%から[%実行モード名%]をされた</font>","うふふ")
		ENDIF
	ENDIF
ENDIF

;現在のモードとの比較・消去
指競合フラグ_プレイヤー = 0
指競合フラグ_ターゲット = 0
文字列表示フラグ = 0
FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	消去フラグ = 0
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == ""
		BREAK

	SIF DT_CELL_ISNULL("体位モードデータベース", 配列番号, "同時実行id") == 0 && DT_CELL_GET("体位モードデータベース", 配列番号, "同時実行id") == 同時実行ID保存
		CONTINUE

	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 実行キャラ番号 || DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 実行キャラ番号
		CALL MODE_競合判定_プレイヤー(実行モード名, 配列番号, 実行キャラ番号, 対象キャラ番号, 指競合フラグ_プレイヤー)
		消去フラグ += RESULT
	ENDIF
	IF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") == 対象キャラ番号 || DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") == 対象キャラ番号
		CALL MODE_競合判定_ターゲット(実行モード名, 配列番号, 実行キャラ番号, 対象キャラ番号, 指競合フラグ_ターゲット)
		消去フラグ += RESULT
	ENDIF
	;競合するならモード消去
	IF 消去フラグ
		;初回のみ定型文表示
		IF 文字列表示フラグ == 0
			DRAWLINE
			IF 実行キャラ番号 >= 0
				PRINTFORM %CALLNAME:実行キャラ番号%が%CALLNAME:対象キャラ番号%に
			ELSE
				PRINTFORM %CALLNAME:対象キャラ番号%が
			ENDIF
			PRINTFORML %実行モード名%をするために、以下のモードを止めました。
		ENDIF
		PRINTFORM [%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%] 
		SIF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") >= 0
			PRINTFORM 実行者：%CALLNAME:DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ"), 16, LEFT% 
		PRINTFORML 対象者：%CALLNAME:DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ"), 16, LEFT%
		CALL MODE_DELETE_配列詰め(配列番号)
		配列番号 -= 1
		文字列表示フラグ = 1
	ENDIF
NEXT
SIF 文字列表示フラグ
	PRINTW

;モード格納
DT_ROW_ADD "体位モードデータベース", "モード名", 実行モード名, "実行キャラ", 実行キャラ番号, "対象キャラ", 対象キャラ番号, "フリー変数", フリー変数, "フリー文字列", フリー文字列
モードID = RESULT
IF FLAG:モード管理 == 2
	SIF 同時実行ID保存 == 0
		同時実行ID保存 = モードID
	DT_ROW_SET "体位モードデータベース", モードID, "同時実行id", 同時実行ID保存
ENDIF
CALL 部位専有再計算()


@部位専有再計算
#DIM 対象キャラ番号
#DIM 実行キャラ番号
#DIM 部位番号
#DIM 配列番号

;現在あるモードを参照して部位専有を入れ直す
;助手も全員リセット
FOR 部位番号, 0, 部位_要素数
	CVARSET TEQUIP, 101 + 部位番号, 0
NEXT

FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	実行キャラ番号 = DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ")
	対象キャラ番号 = DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ")
	FOR 部位番号, 0, 部位_要素数
		RESULT = 0
		;部位専有の場合１を突っ込む
		TRYCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%(部位番号, "プレイヤー", 実行キャラ番号, 対象キャラ番号)
		SIF RESULT == 部位状況_占有
			TEQUIP:実行キャラ番号:(101 + 部位番号) = 1
		RESULT = 0
		TRYCALLFORM MODETYPE_%DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名")%(部位番号, "ターゲット", 実行キャラ番号, 対象キャラ番号)
		SIF RESULT == 部位状況_占有
			TEQUIP:対象キャラ番号:(101 + 部位番号) = 1
	NEXT
NEXT


@移動時モード消去(移動キャラ)
#DIM キャラ番号
#DIM 移動キャラ
#DIM 配列番号
#DIM 体位番号
;同室にいる、相手が必要なモードを全部消す

FOR 配列番号, 0, DT_ROW_LENGTH("体位モードデータベース")
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == ""
		BREAK
	SIF DT_CELL_GET("体位モードデータベース", 配列番号, "実行キャラ") != 移動キャラ && DT_CELL_GET("体位モードデータベース", 配列番号, "対象キャラ") != 移動キャラ
		CONTINUE
	SIF 系統リスト_アイテム系(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"))
		CONTINUE
	SIF 系統リスト_触手系(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"))
		CONTINUE
	SIF 系統リスト_ハーヴィンオナホ系(DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名"))
		CONTINUE
	SIF DT_CELL_GETS("体位モードデータベース", 配列番号, "モード名") == "全裸散歩"
		CONTINUE
	CALL MODE_DELETE_配列詰め(配列番号)
	配列番号 -= 1
NEXT
