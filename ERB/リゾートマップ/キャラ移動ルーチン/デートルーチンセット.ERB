
@デートルーチンセット決定()
#DIM DB番号
#DIM デートキャラ１
#DIM デートキャラ２
#DIMS CONST デート置き換えルーチン = "プールで遊ぶ", "外で遊ぶ", "遊戯室で遊ぶ", "空艇港でショッピング", "海で遊ぶ", "学校で勉強", "居住区エリアで日常生活", "あなた自宅で日常生活"


;まずは成立してる関係性から
FOR DB番号, 0, DT_ROW_LENGTH("関係性データベース")
	;恋慕でもセフレでもないならスキップ
	SIF DT_CELL_GETS("関係性データベース", DB番号, "関係性種別") != "恋慕" && DT_CELL_GETS("関係性データベース", DB番号, "関係性種別") != "セフレ"
		CONTINUE
	;デート発生率は50％
	; SIF RAND:2
	; 	CONTINUE
	デートキャラ１ = FIND_CHARA_FROM_PERSON_ID(DT_CELL_GET("関係性データベース", DB番号, "対象キャラ１"))
	デートキャラ２ = FIND_CHARA_FROM_PERSON_ID(DT_CELL_GET("関係性データベース", DB番号, "対象キャラ２"))
	;滞在期間チェック
	SIF CFLAG:デートキャラ１:滞在期間 < 0
		CONTINUE
	SIF CFLAG:デートキャラ２:滞在期間 < 0
		CONTINUE
	;既にデートセット済みならスキップ
	SIF CFLAG:デートキャラ１:デート
		CONTINUE
	SIF CFLAG:デートキャラ２:デート
		CONTINUE
	;汎用ルーチン以外ならスキップ
	SIF MATCH(デート置き換えルーチン, 移動ルーチン:デートキャラ１:ルーチンID) == 0
		CONTINUE
	SIF MATCH(デート置き換えルーチン, 移動ルーチン:デートキャラ２:ルーチンID) == 0
		CONTINUE
	;デートフラグをセット
	IF RAND:2
		CFLAG:デートキャラ１:デート = デートキャラ２ + 100
		CFLAG:デートキャラ２:デート = (デートキャラ１ + 100) * -1
		;ルーチンIDを書き換えてルーチンセット
		移動ルーチン:デートキャラ１:ルーチンID = デート先導
		移動ルーチン:デートキャラ１:PMルーチンID = 
		移動ルーチン:デートキャラ２:ルーチンID = デート追従
		移動ルーチン:デートキャラ２:PMルーチンID = 
		CALL ROUTINE_SCHEDULE_デートルーチン(デートキャラ１, デートキャラ２)
	ELSE
		CFLAG:デートキャラ１:デート = (デートキャラ２ + 100) * -1
		CFLAG:デートキャラ２:デート = デートキャラ１ + 100
		;ルーチンセット
		CALL ROUTINE_SCHEDULE_デートルーチン(デートキャラ２, デートキャラ１)
	ENDIF
NEXT

;縁結び関係
;縁結びからの成立関係は二重判定になるけどまあいいか……eraの縁結びパワーってことで……
FOR DB番号, 0, DT_ROW_LENGTH("縁結びデータベース")
	;恋慕でもセフレでもないならスキップ
	SIF DT_CELL_GETS("縁結びデータベース", DB番号, "縁結び種別") != "恋慕" && DT_CELL_GETS("縁結びデータベース", DB番号, "縁結び種別") != "セフレ"
		CONTINUE
	;デート発生率は33％
	SIF RAND:3
		CONTINUE
	デートキャラ１ = FIND_CHARA_FROM_PERSON_ID(DT_CELL_GET("縁結びデータベース", DB番号, "対象キャラ１"))
	デートキャラ２ = FIND_CHARA_FROM_PERSON_ID(DT_CELL_GET("縁結びデータベース", DB番号, "対象キャラ２"))
	;滞在期間チェック
	SIF CFLAG:デートキャラ１:滞在期間 < 0
		CONTINUE
	SIF CFLAG:デートキャラ２:滞在期間 < 0
		CONTINUE
	;既にデートセット済みならスキップ
	SIF CFLAG:デートキャラ１:デート
		CONTINUE
	SIF CFLAG:デートキャラ２:デート
		CONTINUE
	;汎用ルーチン以外ならスキップ
	SIF MATCH(デート置き換えルーチン, 移動ルーチン:デートキャラ１:ルーチンID) == 0
		CONTINUE
	SIF MATCH(デート置き換えルーチン, 移動ルーチン:デートキャラ２:ルーチンID) == 0
		CONTINUE
	;デートフラグをセット
	IF RAND:2
		CFLAG:デートキャラ１:デート = デートキャラ２ + 100
		CFLAG:デートキャラ２:デート = (デートキャラ１ + 100) * -1
		;ルーチンIDを書き換えてルーチンセット
		移動ルーチン:デートキャラ１:ルーチンID = デート先導
		移動ルーチン:デートキャラ１:PMルーチンID = 
		移動ルーチン:デートキャラ２:ルーチンID = デート追従
		移動ルーチン:デートキャラ２:PMルーチンID = 
		CALL ROUTINE_SCHEDULE_デートルーチン(デートキャラ１, デートキャラ２)
	ELSE
		CFLAG:デートキャラ１:デート = (デートキャラ２ + 100) * -1
		CFLAG:デートキャラ２:デート = デートキャラ１ + 100
		;ルーチンセット
		CALL ROUTINE_SCHEDULE_デートルーチン(デートキャラ２, デートキャラ１)
	ENDIF
NEXT







@ROUTINE_SCHEDULE_デートルーチン(先導キャラ, 追従キャラ)
#DIM 先導キャラ
#DIM 追従キャラ
#DIM 配列番号
#DIM 関数番号
#DIMS DYNAMIC ルーチン候補配列, 20

移動ルーチン:先導キャラ:ルーチンID = 
移動ルーチン:先導キャラ:PMルーチンID = 
移動ルーチン:追従キャラ:ルーチンID = 
移動ルーチン:追従キャラ:PMルーチンID = 

;行動は先導キャラの行動ゆらぎに合わせて行動

	LOCAL = 3
	ルーチン候補配列:0 '= "プールで遊ぶ"
	ルーチン候補配列:1 '= "外で遊ぶ"
	ルーチン候補配列:2 '= "遊戯室で遊ぶ"
	IF 居住区改造度:0:0
		ルーチン候補配列:3 '= "居住区エリアで日常生活"
		LOCAL = 4
	ENDIF
	FOR 関数番号, 0, ENUMFUNCBEGINSWITH("ROUTINE_ABLE_")
		RESULT = 0
		CALLFORM %RESULTS:関数番号%
		IF RESULT
			ルーチン候補配列:LOCAL = %REPLACE(RESULTS:関数番号, "ROUTINE_ABLE_", "")%
			LOCAL += 1
		ENDIF
	NEXT

	移動ルーチン:先導キャラ:ルーチンID '= ルーチン候補配列:(RAND:LOCAL)
	移動ルーチン:先導キャラ:PMルーチンID '= ルーチン候補配列:(RAND:LOCAL)
	移動ルーチン:追従キャラ:ルーチンID '= 移動ルーチン:先導キャラ:ルーチンID
	移動ルーチン:追従キャラ:PMルーチンID '= 移動ルーチン:先導キャラ:PMルーチンID

	CALLFORM ROUTINE_SCHEDULE_AM_%移動ルーチン:先導キャラ:ルーチンID%(先導キャラ)
	CALLFORM ROUTINE_SCHEDULE_PM_%移動ルーチン:先導キャラ:PMルーチンID%(先導キャラ)

	;行動予定を完全コピー
	配列番号 = 0
	DO
		移動スケジュール設定:追従キャラ:配列番号:開始予定時間 = 移動スケジュール設定:先導キャラ:配列番号:開始予定時間
		移動スケジュール文字列:追従キャラ:配列番号:スケジュール '= 移動スケジュール文字列:先導キャラ:配列番号:スケジュール
		移動スケジュール文字列:追従キャラ:配列番号:スケジュール小分類 '= 移動スケジュール文字列:先導キャラ:配列番号:スケジュール小分類
		移動スケジュール設定:追従キャラ:配列番号:所要時間 = 移動スケジュール設定:先導キャラ:配列番号:所要時間
		移動スケジュール設定:追従キャラ:配列番号:優先度 = 移動スケジュール設定:先導キャラ:配列番号:優先度
		配列番号 ++
	LOOP 移動スケジュール文字列:先導キャラ:配列番号:スケジュール != ""


