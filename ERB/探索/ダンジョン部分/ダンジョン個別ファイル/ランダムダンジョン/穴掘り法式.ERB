@穴掘り方式(サイズ, 採掘方角決定ロジック, 採掘回数, 部屋多さ, 最大部屋作成数)
#DIM 採掘マップ, 採掘マップ要素数, 採掘マップ要素数
#DIM 採掘マップ_一時保存, 採掘マップ要素数, 採掘マップ要素数
#DIM 採掘方角配列, 採掘方角数
#DIM 採掘回数 ;次の部屋までの距離
#DIM サイズ ;幅
#DIM 採掘現在位置, 座標次元数 ;0=X（横）, 1=Y（縦）
#DIM 部屋多さ
#DIM 採掘方角決定ロジック ;0=完全ランダム, 1=後退なし（北西南とは動かない）
#DIM 左上端座標
#DIM 右下端座標
#DIM 親部屋座標, 座標次元数
#DIM 部屋座標リスト, 座標リスト要素数, 座標次元数
#DIM 現在親部屋カーソル ;座標リストのどの部屋を親にしているか記憶する
#DIM 最大部屋作成数 ;設定によっては部屋がぎっしり埋まるので上限値を用意しておく
#DIM 接続先検索カウンタ
#DIM 残り分岐数
#DIM 残り採掘回数
#DIM 部屋作成フラグ
#DIM 子部屋座標, 座標次元数
#DIM 親部屋座標リスト, 座標リスト要素数, 座標次元数

;採掘マップを埋めてサイズを決める
;0=掘れない壁, 1=掘れる壁
VARSET 採掘マップ

;採掘マップの掘れる範囲の座標
左上端座標 = (8 - サイズ) / 2 + 1
右下端座標 = 左上端座標 + サイズ

;掘れる壁で埋める
FOR LOCAL:0, 左上端座標, 右下端座標
	FOR LOCAL:1, 左上端座標, 右下端座標
		採掘マップ:(LOCAL:0):(LOCAL:1) = 1
	NEXT
NEXT

;初期配置を決める
ランダムダンジョン初期位置:0 = RAND:サイズ + (8 - サイズ) / 2
ランダムダンジョン初期位置:1 = RAND:サイズ + (8 - サイズ) / 2

;採掘マップでの位置、座標がずれる
採掘現在位置:0 = ランダムダンジョン初期位置:0 + 1
採掘現在位置:1 = ランダムダンジョン初期位置:1 + 1
採掘マップ:(採掘現在位置:0):(採掘現在位置:1) = 0

VARSET 部屋座標リスト, -1
VARSET 親部屋座標リスト, -1
親部屋座標:0 = ランダムダンジョン初期位置:0
親部屋座標:1 = ランダムダンジョン初期位置:1
現在親部屋カーソル = 0
部屋座標リスト:現在親部屋カーソル:0 = 親部屋座標:0
部屋座標リスト:現在親部屋カーソル:1 = 親部屋座標:1

;頑張って掘る
WHILE 部屋座標リスト:現在親部屋カーソル:0 >= 0 && 最大部屋作成数 > 0

	残り分岐数 = (RAND:部屋多さ) / 6 + 1

	WHILE 残り分岐数 > 0

		;採掘マップを一時保存
		CALL 採掘マップコピー(採掘マップ, 採掘マップ_一時保存)

		残り採掘回数 = 採掘回数

		WHILE 残り採掘回数 > 0

			;採掘方角を決める、採掘先のチェック、採掘処理の順に行う
			;詰み、再試行などを考慮して配列に方角をストックして消費する方式にする

			部屋作成フラグ = 0

			SELECTCASE 採掘方角決定ロジック
				CASE 0 ;完全ランダム
					VARSET 採掘方角配列
					;掘り進む方向を決める 方角は東西南北
					FOR LOCAL, 0, 採掘方角数
						採掘方角配列:LOCAL = LOCAL
					NEXT
					FOR LOCAL, 採掘方角数-1, 1, -1
						SWAP 採掘方角配列:LOCAL, 採掘方角配列:(RAND:LOCAL)
					NEXT

					;決定した順序でチェック＆実行
					FOR LOCAL, 0, 採掘方角数
						IF 採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL) == 1
							CALL 採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL)
							部屋作成フラグ = 1
							残り採掘回数 --
							BREAK
						ENDIF
					NEXT

				CASE 1 ;後退なし
					VARSET 採掘方角配列
					;掘り進む方向を決める 方角は東西南北
					FOR LOCAL, 0, 座標次元数
						;0,1　2,3のどちらかを入れる（東西のいずれか、南北のいずれか）
						採掘方角配列:LOCAL = RAND:2 +(LOCAL * 2)
					NEXT
					;ランダムで入れ替える
					SIF RAND:2 == 0
						SWAP 採掘方角配列:0, 採掘方角配列:1

					;決定した順序でチェック＆実行
					FOR LOCAL, 0, 座標次元数
						IF 採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL) == 1
							CALL 採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角配列:LOCAL)
							部屋作成フラグ = 1
							残り採掘回数 --
							BREAK
						ENDIF
					NEXT

			ENDSELECT

			;掘れないで終わったときループから出す
			SIF 部屋作成フラグ == 0
				BREAK

		WEND

		IF 部屋作成フラグ == 1
			;採掘マップ座標を通常座標に読み替えて代入
			子部屋座標:0 = 採掘現在位置:0 - 1
			子部屋座標:1 = 採掘現在位置:1 - 1

			FOR LOCAL, 1, 座標リスト要素数
				IF 部屋座標リスト:LOCAL:0 < 0
					部屋座標リスト:LOCAL:0 = 子部屋座標:0
					部屋座標リスト:LOCAL:1 = 子部屋座標:1
					親部屋座標リスト:LOCAL:0 = 親部屋座標:0
					親部屋座標リスト:LOCAL:1 = 親部屋座標:1
					BREAK
				ENDIF
			NEXT

			最大部屋作成数 --

			採掘現在位置:0 = 親部屋座標:0 + 1
			採掘現在位置:1 = 親部屋座標:1 + 1
		ELSE
			;採掘マップを一時保存から元に戻す
			CALL 採掘マップコピー(採掘マップ_一時保存, 採掘マップ)
		ENDIF

		残り分岐数 --

	WEND

	現在親部屋カーソル ++

	;親部屋の更新、古い部屋順に回す
	親部屋座標:0 = 部屋座標リスト:現在親部屋カーソル:0
	親部屋座標:1 = 部屋座標リスト:現在親部屋カーソル:1

	;採掘マップの座標も更新
	採掘現在位置:0 = 親部屋座標:0 + 1
	採掘現在位置:1 = 親部屋座標:1 + 1

WEND

FOR LOCAL, 0, 座標リスト要素数

	SIF 部屋座標リスト:LOCAL:0 < 0
		BREAK

	;部屋の存在フラグを立てる
	ランダムダンジョン配列:(部屋座標リスト:LOCAL:0):(部屋座標リスト:LOCAL:1):0 = 1

	IF 親部屋座標リスト:LOCAL:0 >= 0
		;ランジョン配列親横縦の接続先空欄に子部屋座標を入れる
		FOR 接続先検索カウンタ, 3, 100
			IF ランダムダンジョン配列:(親部屋座標リスト:LOCAL:0):(親部屋座標リスト:LOCAL:1):接続先検索カウンタ == ""
				ランダムダンジョン配列:(親部屋座標リスト:LOCAL:0):(親部屋座標リスト:LOCAL:1):接続先検索カウンタ = {部屋座標リスト:LOCAL:0}_{部屋座標リスト:LOCAL:1}
				BREAK
			ENDIF
		NEXT
	ENDIF

NEXT


@採掘マップコピー(採掘マップ_コピー元, 採掘マップ_コピー先)
#DIM REF 採掘マップ_コピー元, 0, 0
#DIM REF 採掘マップ_コピー先, 0, 0

FOR LOCAL:0, 0, 採掘マップ要素数
	FOR LOCAL:1, 0, 採掘マップ要素数
		採掘マップ_コピー先:(LOCAL:0):(LOCAL:1) = 採掘マップ_コピー元:(LOCAL:0):(LOCAL:1)
	NEXT
NEXT


@採掘実行処理(採掘マップ, 採掘現在位置, 採掘方角)
#DIM REF 採掘マップ, 0, 0
#DIM REF 採掘現在位置, 0
#DIM 採掘方角

SELECTCASE 採掘方角
	CASE 0 ;東
		採掘現在位置:0 ++
	CASE 1 ;西
		採掘現在位置:0 --
	CASE 2 ;南
		採掘現在位置:1 ++
	CASE 3 ;北
		採掘現在位置:1 --
ENDSELECT

採掘マップ:(採掘現在位置:0):(採掘現在位置:1) = 0


@採掘可否チェック(採掘マップ, 採掘現在位置, 採掘方角)
#FUNCTION
#DIM REF 採掘マップ, 0, 0
#DIM REF 採掘現在位置, 0
#DIM 採掘方角

;方角は東西南北
SELECTCASE 採掘方角
	CASE 0 ;東
		SIF 採掘マップ:(採掘現在位置:0 + 1):(採掘現在位置:1) == 1
			RETURNF 1
	CASE 1 ;西
		SIF 採掘マップ:(採掘現在位置:0 - 1):(採掘現在位置:1) == 1
			RETURNF 1
	CASE 2 ;南
		SIF 採掘マップ:(採掘現在位置:0):(採掘現在位置:1 + 1) == 1
			RETURNF 1
	CASE 3 ;北
		SIF 採掘マップ:(採掘現在位置:0):(採掘現在位置:1 - 1) == 1
			RETURNF 1
ENDSELECT

RETURNF 0
