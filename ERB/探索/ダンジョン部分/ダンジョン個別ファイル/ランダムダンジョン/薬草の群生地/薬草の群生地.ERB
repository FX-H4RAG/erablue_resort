
@ダンジョン初期処理_薬草の群生地
;ダンジョン構造の読み込み
;0でない時、そのマスは存在する
;
#DIM 深度
#DIM 分岐
#DIMS 接続先配列,2


VARSET ダンジョン構造配列_薬草の群生地
VARSET 分割ブロックリスト
VARSET ランダムダンジョン配列
ランダムダンジョン中フラグ = 1
CALL ブロック生成(4)
CALL ブロック内部屋生成(8)
CALL 部屋タイプ割り当て


ダンジョンマス画像URL_伏せ状態 = 壁_森
ダンジョン現在位置:0 = ランダムダンジョン初期位置:0
ダンジョン現在位置:1 = ランダムダンジョン初期位置:1
ダンジョン背景画像 = 背景_森

;スタート地点は必ず存在
;初期からオープン済みなので3を入れる
;ビット0：存在するか　ビット1：移動できるか　ビット2：そこから通路を伸ばすか　ビット3：入れないが表示する場合に使用
;ビット4以降：自由枠フラグ

IF GETVAR(@"ダンジョン構造配列_%ダンジョン名%:{ランダムダンジョン初期位置:0}:{ランダムダンジョン初期位置:1}") == 0
	SETVAR @"ダンジョン構造配列_%ダンジョン名%:{ランダムダンジョン初期位置:0}:{ランダムダンジョン初期位置:1}", 3
ENDIF


FOR 深度, 1, 100
	LOCAL = 0
	FOR 分岐, 0, 9
		IF ダンジョン構造配列_薬草の群生地:深度:分岐
			;既にマス情報が入ってるなら飛ばす
			LOCAL = 1
			CONTINUE
		ELSEIF ENUMFUNCBEGINSWITH(@"ダンジョンマス情報_薬草の群生地_{深度}_{分岐}")
			LOCAL = 1
			ダンジョン構造配列_薬草の群生地:深度:分岐 = 1
		ENDIF
	NEXT
	IF LOCAL
		ダンジョン最大深度 = 深度
	ENDIF
NEXT

@ダンジョン解説文_薬草の群生地

詳細文文字列受け渡し変数 = 
詳細文文字列受け渡し変数 += "リゾート島で発見された生命力豊かな森。<br>"
詳細文文字列受け渡し変数 += "立ち入るたびに姿を変える様子は、まるでダンジョンのようだ。<br>"
詳細文文字列受け渡し変数 += "大型の生物は生息しておらず、落ち着いて採集が行える。<br>"

;推奨レベルを返す
RETURN 1

@敵討伐後処理_ダンジョン固有_薬草の群生地(討伐エネミー数)
;ダンジョン内で戦闘した後に呼ばれる関数、主にダンジョンごとのドロップアイテム取得に使用
;まだ敵データはリセットしていないので敵BATTLE_STATEで色々情報は取得可能
#DIM 討伐エネミー数
#DIM ドロップ確率
#DIMS ドロップアイテム

ドロップ確率 = 10 * 討伐エネミー数
ドロップアイテム = 普通の木材
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)

ドロップ確率 = 10 * 討伐エネミー数
ドロップアイテム = 普通の野菜
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)

ドロップ確率 = 10 * 討伐エネミー数
ドロップアイテム = 雑穀
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)

ドロップ確率 = 5 * 討伐エネミー数
ドロップアイテム = 星晶の破片
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)

ドロップ確率 = 1 * 討伐エネミー数
ドロップアイテム = 赤銅の古紋
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)




;----------
;部屋の内容を割り当てる
;----------
@部屋タイプ割り当て
;部屋の属性を調べて対応する条件の部屋からランダムに割り当てる
;ランダムダンジョン配列:深度:分岐:1 = イベントの名前
#DIM 深度
#DIM 分岐

FOR 深度 ,0 ,10
	FOR 分岐 ,0 ,10
		IF 深度 == ランダムダンジョン初期位置:0 && 分岐 == ランダムダンジョン初期位置:1
			ランダムダンジョン配列:深度:分岐:1 = 初期マス
		;初期位置
			CONTINUE
		ELSEIF ランダムダンジョン配列:深度:分岐:4 != ""
			ランダムダンジョン配列:深度:分岐:1 = 隠し通路発見
			CONTINUE
		ELSEIF ランダムダンジョン配列:深度:分岐:3 == ""
		;行き止まり
			LOCAL = RAND:100
			SELECTCASE LOCAL
			;50%で群生地
				CASE IS < 50
					ランダムダンジョン配列:深度:分岐:1 = 群生地
					ランダムダンジョン配列:深度:分岐:2 = 宝箱
				CASEELSE
					ランダムダンジョン配列:深度:分岐:1 = 行き止まり
			ENDSELECT
		ELSE
			ランダムダンジョン配列:深度:分岐:1 = 何もなし
		ENDIF
	NEXT
NEXT


;----------
;マスタイプ
;----------
@マスタイプ薬草の群生地(深度,分岐)
#DIM 深度
#DIM 分岐
SELECTCASE ランダムダンジョン配列:深度:分岐:2
	;マスタイプで分岐
	CASE IS == "宝箱"
		ダンジョンマス画像URL = 床_草原
		IF ランダムダンジョン配列:深度:分岐:0 == "箱空け"
			ダンジョンマス画像URL_重ね表示 = 宝箱アイコン_木箱_開
		ELSE
			ダンジョンマス画像URL_重ね表示 = 宝箱アイコン_木箱
		ENDIF
	CASE IS == ""
		ダンジョンマス画像URL = 床_草原
	CASEELSE
		ダンジョンマス画像URL = 床_草原
ENDSELECT



;----------
;イベント内容
;----------
@イベント薬草の群生地初期マス
ダンジョンクリアフラグ_薬草の群生地 = 1
CALL 口上変数初期化
IF 初来訪マス判定用フラグ == 0
	KSTR:(K++) = この辺りには採れるものはなさそうだ。
	CALL メッセージ欄表示用関数(,,,0)
ELSE
	;最初に訪れた時
	KSTR:(K++) = 森に入ってしばらくすると植生が変わった。
	KSTR:(K++) = この辺りで目当ての薬草が取れるかもしれない。
	CALL メッセージ欄表示用関数()
	CALL 接続ルート全開放処理((ダンジョン現在位置:0), (ダンジョン現在位置:1))
	CALL 口上変数初期化
ENDIF
CALL 画面再描画


@イベント薬草の群生地群生地
CALL 口上変数初期化
IF 初来訪マス判定用フラグ == 0
	KSTR:(K++) = この辺りで採れそうな薬草はもうない。
	CALL メッセージ欄表示用関数(,,,0)
ELSE
	;最初に訪れた時
	WSTR:(K++) = 緩く傾斜のあるところに出た。
	KSTR:(K++) = ・・・辺り一面薬草の群生地だ！！
	KSTR:(K++) = %CALLNAME:PLAYER%は薬草を１０個見つけた！
	CALL メッセージ欄表示用関数()
	ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):0 = 箱空け
	CALL 画面再描画
	CALL 口上変数初期化
	CALL アイテム増減汎用処理("薬草", 10)
ENDIF


@イベント薬草の群生地行き止まり
CALL 口上変数初期化
IF 初来訪マス判定用フラグ == 0
	KSTR:(K++) = この辺りには採れるものはなさそうだ。
	CALL メッセージ欄表示用関数(,,,0)
ELSE
	;最初に訪れた時
	KSTR:(K++) = 視界の開けた場所に出た。
	KSTR:(K++) = 森と呼べるのはこの辺りまでだろう。
	CALL メッセージ欄表示用関数()
	CALL 口上変数初期化
ENDIF
CALL 画面再描画


@イベント薬草の群生地何もなし
CALL 口上変数初期化
IF 初来訪マス判定用フラグ == 0
	KSTR:(K++) = この辺りには採れるものはなさそうだ。
	CALL メッセージ欄表示用関数(,,,0)
ELSE
	;最初に訪れた時
	KSTR:(K++) = 森の中を探索していると、少し開けたところに出た。
	CALL メッセージ欄表示用関数()
	CALL 接続ルート全開放処理((ダンジョン現在位置:0), (ダンジョン現在位置:1))
	CALL 口上変数初期化
ENDIF
CALL 画面再描画


@イベント薬草の群生地隠し通路発見
#DIMS 接続先配列,2

IF 初来訪マス判定用フラグ == 0
;二回目の時
	IF ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):0 == "隠し通路"
	;隠し通路発見イベント
		KSTR:(K++) = 注意深くあたりを見回していると、通り抜けられそうな隙間があった！
		CALL メッセージ欄表示用関数()
		CALL 口上変数初期化
		ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):0 = 隠し通路済
		CALL 接続ルート全開放処理((ダンジョン現在位置:0), (ダンジョン現在位置:1))
		;すべての通路を発見
	ELSE
	;隠し通路を発見済み
			KSTR:(K++) = この辺りには採れるものはなさそうだ。
		CALL メッセージ欄表示用関数()
		CALL 口上変数初期化
		;なにもない・・・
	ENDIF
ELSE
;初訪問の時
	KSTR:(K++) = 森の中を探索していると、少し開けたところに出た。
	CALL メッセージ欄表示用関数()
	CALL 口上変数初期化
	;普通のイベント
	ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):0 = 隠し通路
	FOR LOCAL, 4, 100
		;一つ通路を隠して通路開放
		IF ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):LOCAL == ""
			BREAK
		ENDIF
			SPLIT ランダムダンジョン配列:(ダンジョン現在位置:0):(ダンジョン現在位置:1):LOCAL, "_", 接続先配列
			SETBIT ダンジョン構造配列_薬草の群生地:(TOINT(接続先配列:0)):(TOINT(接続先配列:1)), 1
		NEXT
ENDIF

