@ダンジョン初期処理_奈落の大空洞
;ダンジョン構造の読み込み
;0でない時、そのマスは存在する
#DIM 深度
#DIM 分岐

VARSET ダンジョン構造配列_奈落の大空洞
ダンジョン階層記録 -= 1

ダンジョンサブタイトル = THE ABYSS
ダンジョンマス画像URL_伏せ状態 = 壁_洞窟
ダンジョン現在位置:0 = 3
ダンジョン現在位置:1 = 8
ダンジョン背景画像 = 背景_空洞

;スタート地点は必ず存在
;初期からオープン済みなので3を入れる
;ビット0：存在するか　ビット1：移動できるか　ビット2：マスをオープンするか（ビット１をONにしないと無意味）　ビット3：入れないがオープンする場合に使用
;ビット4以降：自由枠。主に宝箱の開閉やイベント達成フラグなどに使用
IF GETVAR(@"ダンジョン構造配列_%ダンジョン名%:3:8") == 0
	SETVAR @"ダンジョン構造配列_%ダンジョン名%:3:8", 3
ENDIF

FOR 深度, 1, 100
	LOCAL = 0
	FOR 分岐, 0, 9
		IF GETVAR(@"ダンジョン構造配列_%ダンジョン名%:{深度}:{分岐}")
			;既にマス情報が入ってるなら飛ばす
			LOCAL = 1
			CONTINUE
		ELSEIF ENUMFUNCBEGINSWITH(@"ダンジョンマス情報_%ダンジョン名%_{深度}_{分岐}")
			LOCAL = 1
			SETVAR @"ダンジョン構造配列_%ダンジョン名%:深度:分岐", 1
		ENDIF
	NEXT
	IF LOCAL
		ダンジョン最大深度 = 深度
	ENDIF
NEXT

@ダンジョン解説文_奈落の大空洞
詳細文文字列受け渡し変数 = 
詳細文文字列受け渡し変数 += "リゾート島の開拓を行っていたところ発見された、底の見えない空洞。<br>"
詳細文文字列受け渡し変数 += "魔力によって空間がねじれているのか、深部への道中は多種多様な魔物の巣窟になっている。<br>"
詳細文文字列受け渡し変数 += "どんな敵が相手でも対応可能な備えが必要になるだろう。<br>"
詳細文文字列受け渡し変数 += "一回の探索でフロアを踏破しなければやり直しになってしまうため注意。<br>"

;推奨レベルを返す
TRYCCALLFORM 奈落の大空洞_存在判定_{奈落の大空洞踏破フロア数 + 1}
	;次の未踏破フロアがあればその推奨レベル
	SIF RESULT > 0
		RETURN RESULT
CATCH
ENDCATCH
;なければ最後の踏破フロアの推奨レベル
CALLFORM 奈落の大空洞_存在判定_{奈落の大空洞踏破フロア数}

ランダムダンジョンフラグ = 1

RETURN RESULT


@ダンジョン突入時特殊処理_奈落の大空洞
#DIM 推奨レベル
#DIM ランダムモード解禁フラグ

CALL ダンジョン解説文_奈落の大空洞
PRINTFORML ■奈落の大空洞　　推奨Lv：25～
PRINTL
HTML_PRINT 詳細文文字列受け渡し変数
PRINTL
PRINTL 何階から始めますか？
ランダムモード解禁フラグ = 0
FOR LOCAL, 0, 奈落の大空洞踏破フロア数 + 1
	TRYCCALLFORM 奈落の大空洞_存在判定_{LOCAL + 1}
		推奨レベル = RESULT
		SIF 推奨レベル <= 0
			BREAK
	CATCH
		ランダムモード解禁フラグ = 1
		BREAK
	ENDCATCH
	PRINTBUTTON @"[{LOCAL}] 地下%TOFULL(TOSTR(LOCAL + 1))%階から　　推奨Lv：{推奨レベル}", LOCAL
	PRINTL
NEXT
IF ランダムモード解禁フラグ
	PRINTBUTTON @"[998] さらなる奈落へ　　推奨Lv：？？？", 998
	PRINTL
ENDIF
PRINTL
PRINTBUTTON "[999] 戻る", 999
PRINTL
BINPUT
SELECTCASE RESULT
	CASE 999
		RETURN -1
	CASE 998
		ダンジョン階層記録 = 1
		CALLF 奈落の大空洞_深層_正体(1)
		CALL DUNGEON_MAIN_LOOP("奈落の大空洞")
	CASEELSE
		ダンジョン階層記録 = RESULT * -1
		CALL DUNGEON_MAIN_LOOP("奈落の大空洞")
ENDSELECT


@敵討伐後処理_ダンジョン固有_奈落の大空洞(討伐エネミー数)
;ダンジョン内で戦闘した後に呼ばれる関数、主にダンジョンごとのドロップアイテム取得に使用
;まだ敵データはリセットしていないので敵BATTLE_STATEで色々情報は取得可能
#DIM 討伐エネミー数
#DIM ドロップ確率
#DIMS ドロップアイテム

ドロップ確率 = 5 * 討伐エネミー数
ドロップアイテム = 星晶の破片
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)

ドロップ確率 = 1 * 討伐エネミー数
ドロップアイテム = 赤銅の古紋
CALL ドロップ判定処理(ドロップ確率, ドロップアイテム)


@奈落の大空洞_追加レベル補正算出
#DIM 最大レベル
#DIM キャラ数
#DIM ループ用

IF ダンジョン階層記録 && (ダンジョン階層記録 * -1) > 奈落の大空洞踏破フロア数
	;未踏破の場合、無し
	RETURN 0
ELSE
	;踏破済の場合、パーティレベルに応じてさらに敵が強くなる
	最大レベル = 0
	キャラ数 = 0
	FOR ループ用, 0, 14
		SIF ループ用 > 3 && ループ用 < 10
			CONTINUE
		SIF BATTLE_STATE:ループ用:キャラ登録番号 < 1
			CONTINUE
		SIF BATTLE_STATE:ループ用:Lv > 最大レベル
			最大レベル = BATTLE_STATE:ループ用:Lv
		;キャラ数もカウント
		キャラ数 ++
	NEXT
	CALLFORM 奈落の大空洞_存在判定_{ダンジョン階層記録 * -1}
	RETURN MAX(0, 最大レベル - RESULT) * MIN(4, キャラ数) / 4
ENDIF


@ダンジョンマス情報_奈落の大空洞_3_8(ARGS)
#DIM CONST マス深度 = 3
#DIM CONST マス分岐 = 8

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
	CASE "接続先"
		CALL ダンジョン分岐線描画(@"{マス深度}_{マス分岐}", "0_5")
	CASE "マスイベント"
		IF 初来訪マス判定用フラグ
			;最初に訪れた時
			IF (ダンジョン階層記録 * -1) > 奈落の大空洞踏破フロア数
				WSTR:(K++) = 未探索エリアに到着した。
				KSTR:(K++) = 警戒しながら進もう。
			ELSE
				WSTR:(K++) = 目的のエリアに到着した。
				KSTR:(K++) = 周囲を探索し、空洞の調査を進めていこう。
			ENDIF
			CALL 接続ルート全開放処理(マス深度, マス分岐)
		ELSE
			KSTR:(K++) = 周囲を探索し、空洞の調査を進めていこう。
		ENDIF
		CALL メッセージ欄表示用関数(,,,0)
		CALL 画面再描画
ENDSELECT


@ダンジョンマス情報_奈落の大空洞_0_5(ARGS)
#DIM CONST マス深度 = 0
#DIM CONST マス分岐 = 5
#DIM CONST ウェーブ番号 = 1

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
		ダンジョンマス画像URL_重ね表示 = エネミーアイコン
	CASE "接続先"
		CALL ダンジョン分岐線描画(@"{マス深度}_{マス分岐}", "2_1")
	CASE "マスイベント"
		IF GETBIT(ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4) == 0
			;最初に訪れた時
			WSTR:(K++) = 魔物が居座っていて、避けて奥には進めなさそうだ。
			KSTR:(K++) = 強敵に戦いを挑みますか？
			KSTR:(K++) = BUTTON_[はい]
			KSTR:(K++) = BUTTON_[いいえ]
			CALL メッセージ欄表示用関数(,,,0)
			BINPUTS
			SELECTCASE RESULTS
				CASE "[はい]"
					CALL 口上変数初期化
					WSTR:(K++) = %CALLNAME:PLAYER%たちは武器を構え、強敵へと挑む！
					CALL 奈落の大空洞_追加レベル補正算出
					CALLFORM 奈落の大空洞_エネミーセット_{ダンジョン階層記録 * -1}_{ウェーブ番号}(RESULT)
					CALL 雑魚敵遭遇汎用処理
					IF RESULT == 0
						;勝利時のみ先へ進む
						CALL 口上変数初期化
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
						TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
						CALL メッセージ欄表示用関数(,,,0)
						CALL 接続ルート全開放処理(マス深度, マス分岐)
						SETBIT ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4
					ENDIF
				CASE "[いいえ]"
					CALL 口上変数初期化
					WSTR:(K++) = 相手は強敵だ。準備を万端にしてから挑もう。
					CALL メッセージ欄表示用関数(,,,0)
			ENDSELECT
		ELSE
			KSTR:(K++) = 強敵は既に打倒した後だ。
			CALL 接続ルート全開放処理(マス深度, マス分岐)
			CALL メッセージ欄表示用関数(,,,0)
		ENDIF
		CALL 画面再描画
ENDSELECT


@ダンジョンマス情報_奈落の大空洞_2_1(ARGS)
#DIM CONST マス深度 = 2
#DIM CONST マス分岐 = 1
#DIM CONST ウェーブ番号 = 2

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
		ダンジョンマス画像URL_重ね表示 = エネミーアイコン
	CASE "接続先"
		CALL ダンジョン分岐線描画(@"{マス深度}_{マス分岐}", "6_2")
	CASE "マスイベント"
		IF GETBIT(ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4) == 0
			;最初に訪れた時
			WSTR:(K++) = 魔物が居座っていて、避けて奥には進めなさそうだ。
			KSTR:(K++) = 強敵に戦いを挑みますか？
			KSTR:(K++) = BUTTON_[はい]
			KSTR:(K++) = BUTTON_[いいえ]
			CALL メッセージ欄表示用関数(,,,0)
			BINPUTS
			SELECTCASE RESULTS
				CASE "[はい]"
					CALL 口上変数初期化
					WSTR:(K++) = %CALLNAME:PLAYER%たちは武器を構え、強敵へと挑む！
					CALL 奈落の大空洞_追加レベル補正算出
					CALLFORM 奈落の大空洞_エネミーセット_{ダンジョン階層記録 * -1}_{ウェーブ番号}(RESULT)
					CALL 雑魚敵遭遇汎用処理
					IF RESULT == 0
						;勝利時のみ先へ進む
						CALL 口上変数初期化
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
						TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
						CALL メッセージ欄表示用関数(,,,0)
						CALL 接続ルート全開放処理(マス深度, マス分岐)
						SETBIT ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4
					ENDIF
				CASE "[いいえ]"
					CALL 口上変数初期化
					WSTR:(K++) = 相手は強敵だ。準備を万端にしてから挑もう。
					CALL メッセージ欄表示用関数(,,,0)
			ENDSELECT
		ELSE
			KSTR:(K++) = 強敵は既に打倒した後だ。
			CALL 接続ルート全開放処理(マス深度, マス分岐)
			CALL メッセージ欄表示用関数(,,,0)
		ENDIF
		CALL 画面再描画
ENDSELECT


@ダンジョンマス情報_奈落の大空洞_6_2(ARGS)
#DIM CONST マス深度 = 6
#DIM CONST マス分岐 = 2
#DIM CONST ウェーブ番号 = 3

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
		ダンジョンマス画像URL_重ね表示 = エネミーアイコン
	CASE "接続先"
		CALL ダンジョン分岐線描画(@"{マス深度}_{マス分岐}", "5_7")
	CASE "マスイベント"
		IF GETBIT(ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4) == 0
			;最初に訪れた時
			WSTR:(K++) = 魔物が居座っていて、避けて奥には進めなさそうだ。
			KSTR:(K++) = 強敵に戦いを挑みますか？
			KSTR:(K++) = BUTTON_[はい]
			KSTR:(K++) = BUTTON_[いいえ]
			CALL メッセージ欄表示用関数(,,,0)
			BINPUTS
			SELECTCASE RESULTS
				CASE "[はい]"
					CALL 口上変数初期化
					WSTR:(K++) = %CALLNAME:PLAYER%たちは武器を構え、強敵へと挑む！
					CALL 奈落の大空洞_追加レベル補正算出
					CALLFORM 奈落の大空洞_エネミーセット_{ダンジョン階層記録 * -1}_{ウェーブ番号}(RESULT)
					CALL 雑魚敵遭遇汎用処理
					IF RESULT == 0
						;勝利時のみ先へ進む
						CALL 口上変数初期化
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
						TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
						CALL メッセージ欄表示用関数(,,,0)
						CALL 接続ルート全開放処理(マス深度, マス分岐)
						SETBIT ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4
					ENDIF
				CASE "[いいえ]"
					CALL 口上変数初期化
					WSTR:(K++) = 相手は強敵だ。準備を万端にしてから挑もう。
					CALL メッセージ欄表示用関数(,,,0)
			ENDSELECT
		ELSE
			KSTR:(K++) = 強敵は既に打倒した後だ。
			CALL 接続ルート全開放処理(マス深度, マス分岐)
			CALL メッセージ欄表示用関数(,,,0)
		ENDIF
		CALL 画面再描画
ENDSELECT


@ダンジョンマス情報_奈落の大空洞_5_7(ARGS)
#DIM CONST マス深度 = 5
#DIM CONST マス分岐 = 7
#DIM CONST ウェーブ番号 = 4

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
		ダンジョンマス画像URL_重ね表示 = エネミーアイコン
	CASE "接続先"
		CALL ダンジョン分岐線描画(@"{マス深度}_{マス分岐}", "4_6")
	CASE "マスイベント"
		IF GETBIT(ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4) == 0
			;最初に訪れた時
			WSTR:(K++) = 魔物が居座っていて、避けて奥には進めなさそうだ。
			KSTR:(K++) = 強敵に戦いを挑みますか？
			KSTR:(K++) = BUTTON_[はい]
			KSTR:(K++) = BUTTON_[いいえ]
			CALL メッセージ欄表示用関数(,,,0)
			BINPUTS
			SELECTCASE RESULTS
				CASE "[はい]"
					CALL 口上変数初期化
					WSTR:(K++) = %CALLNAME:PLAYER%たちは武器を構え、強敵へと挑む！
					CALL 奈落の大空洞_追加レベル補正算出
					CALLFORM 奈落の大空洞_エネミーセット_{ダンジョン階層記録 * -1}_{ウェーブ番号}(RESULT)
					CALL 雑魚敵遭遇汎用処理
					IF RESULT == 0
						;勝利時のみ先へ進む
						CALL 口上変数初期化
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
						TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
						CALL メッセージ欄表示用関数(,,,0)
						CALL 接続ルート全開放処理(マス深度, マス分岐)
						SETBIT ダンジョン構造配列_奈落の大空洞:マス深度:マス分岐, 4
					ENDIF
				CASE "[いいえ]"
					CALL 口上変数初期化
					WSTR:(K++) = 相手は強敵だ。準備を万端にしてから挑もう。
					CALL メッセージ欄表示用関数(,,,0)
			ENDSELECT
		ELSE
			KSTR:(K++) = 強敵は既に打倒した後だ。
			CALL 接続ルート全開放処理(マス深度, マス分岐)
			CALL メッセージ欄表示用関数(,,,0)
		ENDIF
		CALL 画面再描画
ENDSELECT


@ダンジョンマス情報_奈落の大空洞_4_6(ARGS)
#DIM CONST マス深度 = 4
#DIM CONST マス分岐 = 6
#DIM CONST ウェーブ番号 = 5

SELECTCASE ARGS
	CASE "マス画像"
		ダンジョンマス画像URL = 床_洞窟
		ダンジョンマス画像URL_重ね表示 = エネミーアイコン_赤
	CASE "接続先"
	CASE "マスイベント"
		WSTR:(K++) = 次の階層へ進めそうな岩壁の前に、非常に強大な魔物が居座っている。
		WSTR:(K++) = おそらくこの階層で最も強い魔物だろう。もちろん避けて奥には進めなさそうだ。
		KSTR:(K++) = 強敵に戦いを挑みますか？
		KSTR:(K++) = BUTTON_[はい]
		KSTR:(K++) = BUTTON_[いいえ]
		CALL メッセージ欄表示用関数(,,,0)
		BINPUTS
		SELECTCASE RESULTS
			CASE "[はい]"
				CALL 口上変数初期化
				WSTR:(K++) = %CALLNAME:PLAYER%たちは武器を構え、強敵へと挑む！
				CALL 奈落の大空洞_追加レベル補正算出
				CALLFORM 奈落の大空洞_エネミーセット_{ダンジョン階層記録 * -1}_{ウェーブ番号}(RESULT)
				CALL 雑魚敵遭遇汎用処理
				IF RESULT == 0
					;勝利時のみ先へ進む
					CALL 口上変数初期化
					IF (ダンジョン階層記録 * -1) > 奈落の大空洞踏破フロア数
						奈落の大空洞踏破フロア数 = ダンジョン階層記録 * -1
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒し、次の階層への道を開拓した！
					ELSEIF ダンジョン階層記録 == 0
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
						TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
						CALL メッセージ欄表示用関数(,,,0)

						CALL 口上変数初期化
						WSTR:(K++) = %CALLNAME:PLAYER%たちはさらなる深層への道を進んでいく…
						CALL メッセージ欄表示用関数(,,,0)
						;次階層生成
						ダンジョン階層記録 = 1
						CALL ダンジョン初期処理_奈落の大空洞
						CALL 踏破マス開放処理
						CALL 接続ルート全開放処理((ダンジョン現在位置:0), (ダンジョン現在位置:1))
						CALL 画面再描画
						RETURN
					ELSE
						WSTR:(K++) = %CALLNAME:PLAYER%たちは見事強敵を打倒した！
					ENDIF
					TRYCALLFORM 奈落の大空洞_エネミー勝利後_{ダンジョン階層記録 * -1}_{ウェーブ番号}
					CALL メッセージ欄表示用関数(,,,0)
					;帰還処理
					ダンジョンクリアフラグ_奈落の大空洞 = 1
					CALL 口上変数初期化
					ダンジョン終了状況 = 踏破達成
				ENDIF
			CASE "[いいえ]"
				CALL 口上変数初期化
				WSTR:(K++) = 相手は強敵だ。準備を万端にしてから挑もう。
				CALL メッセージ欄表示用関数(,,,0)
		ENDSELECT
		CALL 画面再描画
ENDSELECT
