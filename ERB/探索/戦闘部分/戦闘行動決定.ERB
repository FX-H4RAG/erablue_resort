
@行動内容入力
#DIM バフ・デバフ番号
#DIM 改行フラグ
#DIM 表示アビ数
#DIM アビ番号

VARSET LOCALS
上メニュー操作許可フラグ = 1
CALL 画面再描画
CALL 口上変数初期化

エネミー画像ボタン化フラグ = 1
キャラ画像ボタン化フラグ = 1

IF BATTLE_STATE:戦闘行動キャラ:奥義ゲージ >= 100
	CALL 奥義名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号)
	KSTR:(K++) = <button value = '100'>[100] 通常攻撃</button>　　　<button value = '101'>[101] 奥義：%TSTR:コマンド名受渡%</button>
ELSE
	KSTR:(K++) = <button value = '100'>[100] 通常攻撃</button>
ENDIF
VARSET RESULTS
VARSET アビ関数名保存
表示アビ数 = ENUMFUNCBEGINSWITH(@"固有アビ_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)}")
IF 表示アビ数
	FOR アビ番号, 0, 表示アビ数
		CALLFORM %RESULTS:アビ番号%("アビ名")
		IF TSTR:コマンド名受渡 != ""
			NSTR:(K++) = <button value = '{110 + アビ番号}'>[{110 + アビ番号}] %TSTR:コマンド名受渡, 26, LEFT%</button>
			アビ関数名保存:アビ番号 = %RESULTS:アビ番号%
		ENDIF
	NEXT
	KSTR:(K++) =  
ELSE
	VARSET RESULTS
	表示アビ数 = ENUMFUNCBEGINSWITH(@"汎用固有アビ_%属性数値文字列変換(基礎BATTLE_STATE:(BATTLE_STATE:戦闘行動キャラ:キャラ番号):属性)%")
	FOR アビ番号, 0, 表示アビ数
		CALLFORM %RESULTS:アビ番号%("アビ名")
		IF TSTR:コマンド名受渡 != ""
			NSTR:(K++) = <button value = '{110 + アビ番号}'>[{110 + アビ番号}] %TSTR:コマンド名受渡, 26, LEFT%</button>
			アビ関数名保存:アビ番号 = %RESULTS:アビ番号%
		ENDIF
	NEXT
	KSTR:(K++) =  
ENDIF
CALL 装備衣装アビ名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号)

; FOR LOCAL:1, 0, 6
; 	LOCALS:10 += LOCALS:(LOCAL:1)
; 	LOCALS:10 += "<br>"
; NEXT
; TSTR:メッセージ欄文字列受け渡し_下側 = <div rect='{左顔グラあり}px,690px,906px,270px'>%LOCALS:10%</div>

; CALL 画面再描画

CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔", @"%CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)%",,0)

BINPUT
戦闘行動内容 = RESULT

SELECTCASE 戦闘行動内容
	CASE 0 TO 19
		;キャラクター状態表示
		DRAWLINE
		IF 戦闘行動内容 < 10
			PRINTFORML ■%CALLNAME:(BATTLE_STATE:戦闘行動内容:キャラ番号)%
		ELSE
			PRINTFORML ■%敵BATTLE_STATE_STR:(戦闘行動内容 - 10):エネミー名%
		ENDIF
		PRINTL ＜バフ＞
		FOR バフ・デバフ番号, 0, DT_ROW_LENGTH(@"バフデータベース_{戦闘行動内容}")
			PRINTFORM %DT_CELL_GETS(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ対象能力")%バフ
			PRINTFORML ：%DT_CELL_GETS(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ名")%
			PRINTFORM 効果枠：%DT_CELL_GETS(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ枠"), 20, LEFT%
			PRINTFORM 効果量：{DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ効果量_固定値"), 4}　　
			PRINTFORML 効果割合：{DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "バフ効果量_割合"), 4}％
			IF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン") < 0
				PRINTFORM 持続ターン：永続
				改行フラグ = 1
			ELSEIF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン") > 0
				PRINTFORM 持続ターン：{DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン")}　　
				改行フラグ = 1
			ENDIF
			IF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続回数") > 0
				PRINTFORM 持続回数：{DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続回数")}　　
				改行フラグ = 1
			ENDIF
			IF DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続行動回数") > 0
				PRINTFORM 持続行動回数：{DT_CELL_GET(@"バフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続行動回数")}　　
				改行フラグ = 1
			ENDIF
			SIF 改行フラグ
				PRINTL
		NEXT
		PRINTL
		PRINTL ＜デバフ＞
		FOR バフ・デバフ番号, 0, DT_ROW_LENGTH(@"デバフデータベース_{戦闘行動内容}")
			PRINTFORM %DT_CELL_GETS(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ対象能力")%デバフ
			PRINTFORML ：%DT_CELL_GETS(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ名")%
			PRINTFORM 効果枠：%DT_CELL_GETS(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ枠"), 20, LEFT%
			PRINTFORM 効果量：{DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ効果量_固定値"), 4}　　
			PRINTFORML 効果割合：{DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "デバフ効果量_割合"), 4}％
			IF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン") < 0
				PRINTFORM 持続ターン：永続
				改行フラグ = 1
			ELSEIF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン") > 0
				PRINTFORM 持続ターン：{DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続ターン")}　　
				改行フラグ = 1
			ENDIF
			IF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続回数") > 0
				PRINTFORM 持続回数：{DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続回数")}　　
				改行フラグ = 1
			ENDIF
			IF DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続行動回数") > 0
				PRINTFORM 持続行動回数：{DT_CELL_GET(@"デバフデータベース_{戦闘行動内容}", バフ・デバフ番号, "持続行動回数")}　　
				改行フラグ = 1
			ENDIF
			SIF 改行フラグ
				PRINTL
		NEXT
		PRINTL
		DRAWLINE
		WAIT
		RESTART
	CASE 1000
		;アイテム使用
		IF アイテム使用済みフラグ
			REUSELASTLINE 
			RESTART
		ENDIF
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		ダンジョン表示モード = アイテム画面
		$INPUT_LOOP_ITEM
		CALL 画面再描画
		INPUT
		LOCAL = RESULT
		SELECTCASE LOCAL
			CASE 1 TO 24
				IF DT_CELL_GET("所持アイテムデータベース", 0, 表示アイテム名:LOCAL)
					選択用変数 = LOCAL
					$INPUT_LOOP_ITEM2
					CALL 画面再描画
					INPUT
					LOCAL = RESULT
					IF LOCAL == 999
						ダンジョン表示モード = アイテム画面
						キャラ画像ボタン化フラグ = 1
						CLEARLINE 1
						選択用変数 = -1
						GOTO INPUT_LOOP_ITEM
					ENDIF
					TRYCCALLFORM アイテム効果処理_%表示アイテム名:選択用変数%(LOCAL)
						IF RESULT == 0
							REUSELASTLINE 
							GOTO INPUT_LOOP_ITEM2
						ENDIF
						アイテム使用済みフラグ = 1
					CATCH
						REUSELASTLINE 
						GOTO INPUT_LOOP_ITEM2
					ENDCATCH
				ELSE
					REUSELASTLINE 
					GOTO INPUT_LOOP_ITEM
				ENDIF
			CASE 999
			CASEELSE
				REUSELASTLINE 
				GOTO INPUT_LOOP_ITEM
		ENDSELECT
		ダンジョン表示モード = 戦闘画面
		選択用変数 = -1
		CALL 画面再描画
		RESTART
	CASE 1001
		;逃げる
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		CALL 口上変数初期化
		KSTR:(K++) = 戦闘から逃げます。よろしいですか？
		KSTR:(K++) = <button value='0'>[0]はい</button>
		KSTR:(K++) = <button value='1'>[1]いいえ</button>
		CALL メッセージ欄表示用関数(,,,0)
		$INPUT_LOOP_ESCAPE
		INPUT
		LOCAL = RESULT
		SELECTCASE LOCAL
			CASE 0
				CALL 口上変数初期化
				CALL 戦闘終了時処理
				KSTR:(K++) = %CALLNAME:PLAYER%は戦闘から逃げ出した…
				CALL メッセージ欄表示用関数()
				キャラ画像ボタン化フラグ = 1
				RETURN -2
			CASE 1
				CALL 口上変数初期化
				CALL 画面再描画
				RESTART
			CASEELSE
				REUSELASTLINE 
				GOTO INPUT_LOOP_ESCAPE
		ENDSELECT
	CASE 1002
		INVERTBIT アビ使用確認スキップフラグ, 0
		CALL 画面再描画
		RESTART
	CASE 100 TO 101
		;通常攻撃or奥義
		;対象選択
		上メニュー操作許可フラグ = 0
		キャラ画像ボタン化フラグ = 0
		エネミー画像ボタン化フラグ = 1
		CALL 口上変数初期化
		KSTR:(K++) = 誰を攻撃しますか？
		KSTR:(K++) = 　
		KSTR:(K++) = 　
		KSTR:(K++) = 　
		KSTR:(K++) = <button value='999'>[999]戻る</button>
		CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔", @"%CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)%",,0)
		$INPUT_LOOP2
		INPUT
		SELECTCASE RESULT
			CASE 10 TO 19
				IF 敵BATTLE_STATE_STR:(RESULT - 10):エネミー名 == ""
					REUSELASTLINE 
					GOTO INPUT_LOOP2
				ELSEIF 敵BATTLE_STATE:(RESULT - 10):ＨＰ < 1
					REUSELASTLINE 
					GOTO INPUT_LOOP2
				ENDIF
				戦闘行動対象 = RESULT
			CASE 999
				RESTART
			CASEELSE
				REUSELASTLINE 
				GOTO INPUT_LOOP2
		ENDSELECT
	CASE 110 TO 129
		エネミー画像ボタン化フラグ = 0
		キャラ画像ボタン化フラグ = 0
		上メニュー操作許可フラグ = 0
	CASEELSE
		REUSELASTLINE 
		RESTART
ENDSELECT


@戦闘行動実処理関数
#DIM 衣装番号
#DIM 消費MP一時保存
CALL アビ汎用変数文字列リセット
CALL 口上変数初期化

SELECTCASE 戦闘行動内容
	CASE 100
		;通常攻撃
		;攻撃回数決定
		LOCAL = RAND:100
		NSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)%の攻撃！　
		LOCAL:2 = バフ・デバフ測定(戦闘行動キャラ, "DA率")
		LOCAL:3 = バフ・デバフ測定(戦闘行動キャラ, "TA率")
		LOCAL:4 = バフ・デバフ測定(戦闘行動キャラ, "連続攻撃率")
		LOCAL:5 = バフ・デバフ測定(戦闘行動キャラ, "ゲージ上昇効率")
		IF LOCAL:3 + LOCAL:4 > LOCAL
			LOCAL = 3
			WSTR:(K++) = トリプルアタック！
			BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 10 * (LOCAL:5) / 100
			BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 12 * (LOCAL:5) / 100
			BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 15 * (LOCAL:5) / 100
		ELSE
			LOCAL = RAND:100
			IF LOCAL:2 + LOCAL:4 > LOCAL
				LOCAL = 2
				WSTR:(K++) = ダブルアタック！
				BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 10 * (LOCAL:5) / 100
				BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 12 * (LOCAL:5) / 100
			ELSE
				LOCAL = 1
				WSTR:(K++) = 　
				BATTLE_STATE:戦闘行動キャラ:奥義ゲージ += 10 * (LOCAL:5) / 100
			ENDIF
		ENDIF
		BATTLE_STATE:戦闘行動キャラ:奥義ゲージ = MIN(BATTLE_STATE:戦闘行動キャラ:奥義ゲージ, BATTLE_STATE:戦闘行動キャラ:ゲージ最大値)
		;ダメージ計算
		CALL かばうチェック_敵()
		IF アビ汎用変数:かばうフラグ
			WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%が攻撃をかばった！
		ENDIF
		NSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%に
		FOR LOCAL:1, 0, LOCAL
			CALL ダメージ計算処理(100)
			NSTR:(K++) = {RESULT}のダメージ！　
			敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ = MAX(敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ - RESULT, 0)
		NEXT
		WSTR:(K++) = 　
		IF 敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ < 1
			CALL 戦闘不能時処理(戦闘行動対象)
			WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%は倒れた！
		ENDIF
	CASE 101
		;奥義
		TRYCALLFORM KOJO_DUNGEON_奥義発動時_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)}()
		BATTLE_STATE:戦闘行動キャラ:奥義ゲージ -= 100
		KSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)%の奥義発動！
		CALL 奥義名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号)
		WSTR:(K++) = %TSTR:コマンド名受渡%！
		;ダメージ計算
		CALL かばうチェック_敵()
		IF アビ汎用変数:かばうフラグ
			WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%が攻撃をかばった！
		ENDIF
		NSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%に
		CALL 奥義威力呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号)
		CALL ダメージ計算処理(RESULT)
		WSTR:(K++) = {RESULT}のダメージ！
		敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ = MAX(敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ - RESULT, 0)
		CALL 奥義追加効果呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号)

		IF 敵BATTLE_STATE:(戦闘行動対象 - 10):ＨＰ < 1
			KSTR:(K++) = 　
			CALL 戦闘不能時処理(戦闘行動対象)
			WSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動対象 - 10):エネミー名%は倒れた！
		ENDIF
	CASE 110 TO 119
		CALL 口上変数初期化
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ名")
		アビテンプレート用_アビ名 = %TSTR:コマンド名受渡%
		KSTR:(K++) = ■%TSTR:コマンド名受渡%
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ説明文")
		消費MP一時保存 = RESULT
		IF アビ使用確認スキップフラグ == 0
			KSTR:(K++) = %TSTR:コマンド名受渡%
			;改行の数をカウントし、必要数を改行して戻るボタンを表示行の最後に入れ込む
			STRCOUNT TSTR:コマンド名受渡, "<br>"
			FOR LOCAL, 0, 4 - RESULT
				KSTR:(K++) = 　
			NEXT
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = <nonbutton>ＭＰが足りません</nonbutton> 　　<button value='999'>[999]戻る</button>
			ELSE
				KSTR:(K++) = <button value='0'>[0]使用する</button>　　　　　<button value='999'>[999]戻る</button>
			ENDIF
			CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔",,,0)
			$INPUT_LOOP2
			INPUT
			SELECTCASE RESULT
				CASE 0
					IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
						REUSELASTLINE 
						GOTO INPUT_LOOP2
					ENDIF
				CASE 999
					RETURN -1
				CASEELSE
					REUSELASTLINE 
					GOTO INPUT_LOOP2
			ENDSELECT
		ELSE
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = ＭＰが足りません。
				CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔")
				RETURN -1
			ENDIF
		ENDIF
		CALL アビテンプレ変数リセット
		CALLFORM %アビ関数名保存:(戦闘行動内容 - 110)%("アビ効果")
		IF RESULT == -1 || アビテンプレート用_キャンセルフラグ
			RETURN -1
		ELSE
			;MP消費
			BATTLE_STATE:戦闘行動キャラ:ＭＰ -= 消費MP一時保存
			CALL アビテンプレート用_表示メッセージ変換処理
		ENDIF
	CASE 120 TO 129
		CALL 口上変数初期化
		CALL 装備衣装アビ名呼び出し(BATTLE_STATE:戦闘行動キャラ:キャラ番号, 戦闘行動内容 - 119)
		アビテンプレート用_アビ名 = %TSTR:コマンド名受渡%
		;ここに来てる時点で存在しないアビが選ばれてことは無いはずなので例外規定は作らない
		衣装番号 = 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ番号):装備衣装番号
		;消費MP算出
		RESULT = 0
		TRYCALLFORM 衣装関数_%DT_CELL_GETS("所持衣装データベース", 衣装番号, "衣装名")%(@"消費MP_{戦闘行動内容 - 119}", BATTLE_STATE:戦闘行動キャラ:キャラ番号)
		消費MP一時保存 = RESULT
		IF アビ使用確認スキップフラグ == 0
			TRYCALLFORM 衣装文章表示_%DT_CELL_GETS("所持衣装データベース", 衣装番号, "衣装名")%(@"追加アビ_{戦闘行動内容 - 119}")
			KSTR:(K++) = %詳細文文字列受け渡し変数%
			;改行の数をカウントし、必要数を改行して戻るボタンを表示行の最後に入れ込む
			STRCOUNT 詳細文文字列受け渡し変数, "<br>"
			FOR LOCAL, 0, 4 - RESULT
				KSTR:(K++) = 　
			NEXT
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = <nonbutton>ＭＰが足りません</nonbutton> 　　<button value='999'>[999]戻る</button>
			ELSE
				KSTR:(K++) = <button value='0'>[0]使用する</button>　　　　　<button value='999'>[999]戻る</button>
			ENDIF
			CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔",,,0)
			$INPUT_LOOP3
			INPUT
			SELECTCASE RESULT
				CASE 0
					IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
						REUSELASTLINE 
						GOTO INPUT_LOOP3
					ENDIF
				CASE 999
					RETURN -1
				CASEELSE
					REUSELASTLINE 
					GOTO INPUT_LOOP3
			ENDSELECT
		ELSE
			KSTR:(K++) = ■%TSTR:コマンド名受渡%
			IF BATTLE_STATE:戦闘行動キャラ:ＭＰ < 消費MP一時保存
				KSTR:(K++) = ＭＰが足りません。
				CALL メッセージ欄表示用関数(@"探索用_{戦闘行動キャラ}_顔")
				RETURN -1
			ENDIF
		ENDIF
		CALL アビテンプレ変数リセット
		TRYCALLFORM 衣装関数_%DT_CELL_GETS("所持衣装データベース", 衣装番号, "衣装名")%(@"効果処理_{戦闘行動内容 - 119}", BATTLE_STATE:戦闘行動キャラ:キャラ番号)
		IF RESULT == -1 || アビテンプレート用_キャンセルフラグ
			RETURN -1
		ELSE
			;MP消費
			BATTLE_STATE:戦闘行動キャラ:ＭＰ -= 消費MP一時保存
			CALL アビテンプレート用_表示メッセージ変換処理
		ENDIF
ENDSELECT

CALL メッセージ欄表示用関数(,,,0)
BATTLE_STATE:戦闘行動キャラ:行動済みフラグ = 1

@敵戦闘行動実処理関数
#DIM 攻撃対象, 10
VARSET LOCAL
VARSET 攻撃対象
IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大チャージターン > 0
	IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):チャージターン >= 敵BATTLE_STATE:(戦闘行動キャラ - 10):最大チャージターン
		TRYCCALLFORM 敵チャージ行動_%敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名%
			敵BATTLE_STATE:(戦闘行動キャラ - 10):行動済みフラグ = 1
			敵BATTLE_STATE:(戦闘行動キャラ - 10):チャージターン = 0
			RETURN
		CATCH
		ENDCATCH
	ELSE
		敵BATTLE_STATE:(戦闘行動キャラ - 10):チャージターン += 1
	ENDIF
ENDIF
;味方の数判定
FOR LOCAL, 0, 4
	SIF BATTLE_STATE:LOCAL:キャラ番号 < 1
		CONTINUE
	SIF BATTLE_STATE:LOCAL:ＨＰ < 1
		CONTINUE
	攻撃対象:(LOCAL:10) = LOCAL
	LOCAL:10 += 1
NEXT

LOCAL = RAND:(LOCAL:10)
戦闘行動対象 = 攻撃対象:LOCAL

CALL かばうチェック_味方()

;通常攻撃
;攻撃回数決定
戦闘行動内容 = 200
CALL 口上変数初期化

LOCAL = RAND:100
LOCAL:2 = バフ・デバフ測定(戦闘行動キャラ, "DA率")
LOCAL:3 = バフ・デバフ測定(戦闘行動キャラ, "TA率")
LOCAL:4 = バフ・デバフ測定(戦闘行動キャラ, "連続攻撃率")

NSTR:(K++) = %敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー名%の攻撃！　
IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):TA率 + LOCAL:3 + LOCAL:4 > LOCAL
	LOCAL = 3
	WSTR:(K++) = トリプルアタック！
ELSE
	LOCAL = RAND:100
	IF 敵BATTLE_STATE:(戦闘行動キャラ - 10):DA率 + LOCAL:2 + LOCAL:4 > LOCAL
		LOCAL = 2
		WSTR:(K++) = ダブルアタック！
	ELSE
		LOCAL = 1
		WSTR:(K++) = 　
	ENDIF
ENDIF
;ダメージ計算
IF アビ汎用変数:かばうフラグ
	WSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動対象:キャラ番号)%が攻撃をかばった！
ENDIF
NSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動対象:キャラ番号)%に
FOR LOCAL:1, 0, LOCAL
	CALL ダメージ計算処理(100)
	NSTR:(K++) = {RESULT}のダメージ！　
	BATTLE_STATE:戦闘行動対象:ＨＰ = MAX(BATTLE_STATE:戦闘行動対象:ＨＰ - RESULT, 0)
NEXT
IF BATTLE_STATE:戦闘行動対象:ＨＰ < 1
	WSTR:(K++) = 　
	CALL 戦闘不能時処理(戦闘行動対象)
	KSTR:(K++) = %CALLNAME:(BATTLE_STATE:戦闘行動対象:キャラ番号)%は倒れた！
ENDIF

CALL メッセージ欄表示用関数()
敵BATTLE_STATE:(戦闘行動キャラ - 10):行動済みフラグ = 1




@ダメージ計算処理(攻撃威力変数, 防御無視率 = 0, 攻撃側使用能力値 = "攻撃力", 防御側使用能力値 = "防御力")
#DIM 攻撃威力変数
#DIM 防御数値
#DIM 攻撃数値
#DIM 乱数幅
#DIM 対象属性
#DIM 行動者属性
#DIM 属性補正フラグ
#DIM 属性強化変数
#DIM 属性耐性変数
#DIM 防御無視率
#DIMS 攻撃側使用能力値
#DIMS 防御側使用能力値
VARSET LOCAL
VARSET LOCALS

攻撃数値 = バフ・デバフ測定(戦闘行動キャラ, 攻撃側使用能力値) * 攻撃威力変数 / 100
防御数値 = バフ・デバフ測定(戦闘行動対象, 防御側使用能力値)
乱数幅 = 5

IF 戦闘行動対象 < 10
	対象属性 = BATTLE_STATE:戦闘行動対象:属性
ELSEIF 戦闘行動対象 >= 10
	対象属性 = 敵BATTLE_STATE:(戦闘行動対象 - 10):属性
ENDIF
IF 戦闘行動キャラ < 10
	;味方側処理
	行動者属性 = BATTLE_STATE:戦闘行動キャラ:属性
	属性補正フラグ = 属性有利不利(行動者属性, 対象属性, "味方側")
ELSEIF 戦闘行動キャラ >= 10
	;敵側処理
	行動者属性 = 敵BATTLE_STATE:(戦闘行動キャラ - 10):属性
	属性補正フラグ = 属性有利不利(行動者属性, 対象属性,  "敵側")
ENDIF
属性強化変数 = バフ・デバフ測定(戦闘行動キャラ, @"%属性数値文字列変換(行動者属性)%強化")
属性強化変数 += バフ・デバフ測定(戦闘行動キャラ, "全強化")
属性耐性変数 = バフ・デバフ測定(戦闘行動対象, @"%属性数値文字列変換(対象属性)%耐性")
属性耐性変数 += バフ・デバフ測定(戦闘行動対象, "全耐性")

;乱数幅は、「算出数値から上下に{乱数幅}％の範囲でランダムに変化させる」数値
;基本は５％を想定。ムラが大きい攻撃は大きく、ムラが小さい攻撃は小さくすること

;基礎ダメージ計算
IF アビ汎用変数:防御無視オプション_割合 || アビ汎用変数:防御無視オプション_固定値
	防御数値 = 防御数値 * (100 - アビ汎用変数:防御無視オプション_割合) / 100
	防御数値 = MAX(0, 防御数値 - アビ汎用変数:防御無視オプション_固定値)
ELSEIF 防御無視率
	防御数値 = 防御数値 * (100 - 防御無視率) / 100
ENDIF
LOCAL = (攻撃数値 / 2) - (防御数値 / 4)

;属性補正
IF 属性補正フラグ == 1
	LOCAL = MAX(LOCAL * 120 / 100, 攻撃数値 / 5)
ELSEIF 属性補正フラグ == -1
	LOCAL = LOCAL * 80 / 100
ENDIF
LOCAL = LOCAL * (100 + 属性強化変数 - 属性耐性変数) / 100

;ダメージカット
LOCAL = バフ・デバフ測定(戦闘行動対象, "ダメージ増減", LOCAL)

;乱数処理
LOCAL:1 = RAND:(乱数幅 * 2 + 1) - 乱数幅
LOCAL = LOCAL * (100 + LOCAL:1) / 100
;最低保障１
LOCAL = MAX(LOCAL, 1)
RETURN LOCAL




@回復量計算処理(回復威力変数, 回復側使用能力値 = "回復力", 乱数幅 = 5)
#DIM 回復威力変数
#DIMS 回復側使用能力値
#DIM 回復数値
#DIM 乱数幅
;乱数幅は、「算出数値から上下に{乱数幅}％の範囲でランダムに変化させる」数値
;基本は５％を想定。ムラが大きい攻撃は大きく、ムラが小さい攻撃は小さくすること
VARSET LOCAL

回復数値 = バフ・デバフ測定(戦闘行動キャラ, 回復側使用能力値) * 回復威力変数 / 100

;基礎ダメージ計算
LOCAL = 回復数値

;乱数処理
LOCAL:1 = RAND:(乱数幅 * 2 + 1) - 乱数幅
LOCAL = LOCAL * (100 + LOCAL:1) / 100
;最低保障１
LOCAL = MAX(LOCAL, 1)
RETURN LOCAL


@戦闘不能時処理(ARG)
;バフ・デバフをリセット
DT_CLEAR @"バフデータベース_{ARG}"
DT_CLEAR @"デバフデータベース_{ARG}"
