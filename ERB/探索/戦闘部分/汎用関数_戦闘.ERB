@キャラ隊列検索(ARG)
#FUNCTION
FOR LOCAL, 0, 4
	IF BATTLE_STATE:LOCAL:キャラ番号 == ARG
		RETURNF LOCAL
	ENDIF
NEXT
RETURNF -1

@最大レベル算出()
#FUNCTION
LOCAL:1 = 0
FOR LOCAL, 0, CHARANUM
	IF 基礎BATTLE_STATE:LOCAL:Lv > LOCAL:1
		LOCAL:1 = 基礎BATTLE_STATE:LOCAL:Lv
	ENDIF
NEXT
RETURNF LOCAL:1

@属性文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "火"
		RETURNF 0
	CASE "水"
		RETURNF 1
	CASE "風"
		RETURNF 2
	CASE "土"
		RETURNF 3
	CASE "光"
		RETURNF 4
	CASE "闇"
		RETURNF 5
	CASE "無"
		RETURNF 6
ENDSELECT

@属性数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE 0
		RETURNF "火"
	CASE 1
		RETURNF "水"
	CASE 2
		RETURNF "風"
	CASE 3
		RETURNF "土"
	CASE 4
		RETURNF "光"
	CASE 5
		RETURNF "闇"
ENDSELECT

@得意武器文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "剣"
		RETURNF 0
	CASE "短剣"
		RETURNF 1
	CASE "槍"
		RETURNF 2
	CASE "斧"
		RETURNF 3
	CASE "杖"
		RETURNF 4
	CASE "銃"
		RETURNF 5
	CASE "格闘"
		RETURNF 6
	CASE "弓"
		RETURNF 7
	CASE "楽器"
		RETURNF 8
	CASE "刀"
		RETURNF 9
ENDSELECT

@得意武器数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE 0
		RETURNF "剣"
	CASE 1
		RETURNF "短剣"
	CASE 2
		RETURNF "槍"
	CASE 3
		RETURNF "斧"
	CASE 4
		RETURNF "杖"
	CASE 5
		RETURNF "銃"
	CASE 6
		RETURNF "格闘"
	CASE 7
		RETURNF "弓"
	CASE 8
		RETURNF "楽器"
	CASE 9
		RETURNF "刀"
ENDSELECT

@タイプ数値文字列変換(ARG)
#FUNCTIONS

SELECTCASE ARG
	CASE -1
		RETURNF "固有"
	CASE 0
		RETURNF "バランス"
	CASE 1
		RETURNF "攻撃"
	CASE 2
		RETURNF "防御"
	CASE 3
		RETURNF "回復"
	CASE 4
		RETURNF "サポート"
	CASE 5
		RETURNF "連撃"
	CASE 6
		RETURNF "回避"
	CASE 7
		RETURNF "奥義"
ENDSELECT

@タイプ文字列数値変換(ARGS)
#FUNCTION

SELECTCASE ARGS
	CASE "固有"
		RETURNF -1
	CASE "バランス"
		RETURNF 0
	CASE "攻撃"
		RETURNF 1
	CASE "防御"
		RETURNF 2
	CASE "回復"
		RETURNF 3
	CASE "サポート"
		RETURNF 4
	CASE "連撃"
		RETURNF 5
	CASE "回避"
		RETURNF 6
	CASE "奥義"
		RETURNF 7
ENDSELECT


@属性有利不利(攻撃側, 防御側, ARGS)
#FUNCTION
#DIM 攻撃側
#DIM 防御側

SELECTCASE 攻撃側
	CASE 0
		;火
		IF 防御側 == 2
			RETURNF 1
		ELSEIF 防御側 == 1
			RETURNF -1
		ENDIF
	CASE 1
		;水
		IF 防御側 == 0
			RETURNF 1
		ELSEIF 防御側 == 3
			RETURNF -1
		ENDIF
	CASE 2
		;風
		IF 防御側 == 3
			RETURNF 1
		ELSEIF 防御側 == 0
			RETURNF -1
		ENDIF
	CASE 3
		;土
		IF 防御側 == 1
			RETURNF 1
		ELSEIF 防御側 == 2
			RETURNF -1
		ENDIF
	CASE 4
		;光
		IF 防御側 == 5
			IF ARGS == "味方側"
				RETURNF 1
			ELSEIF ARGS == "敵側"
				RETURNF -1
			ENDIF
		ENDIF
	CASE 5
		;闇
		IF 防御側 == 4
			IF ARGS == "味方側"
				RETURNF 1
			ELSEIF ARGS == "敵側"
				RETURNF -1
			ENDIF
		ENDIF
ENDSELECT

RETURNF 0



@バフ・デバフ測定(ARG, バフ・デバフ種類, 補正前数値, 観測のみフラグ = 0)
;--------------------------------------------------------------------
;持続回数を減少する処理も入れ込んでいるので、実処理時以外はちゃんと観測のみフラグを立てること
;補正前数値を使うのは補正前の数値を取ることが出来ないダメージ関係の処理のみ
;--------------------------------------------------------------------
#DIMS バフ・デバフ種類
#DIM データベース行数
#DIM バフ・デバフ補正後数値
#DIM ループ用
#DIM 補正前数値
#DIM 観測のみフラグ
VARSET LOCAL
バフ・デバフ補正後数値 = 0

IF GETNUM(BATTLE_STATE, バフ・デバフ種類, 2) > 0
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{ARG}", ループ用, "バフ対象能力") == バフ・デバフ種類
			LOCAL += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_割合")
			LOCAL:1 += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL バフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == バフ・デバフ種類
			LOCAL -= DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_割合")
			LOCAL:1 -= DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	IF ARG < 10
		;味方側
		バフ・デバフ補正後数値 = (BATTLE_STATE:ARG:バフ・デバフ種類 * (100 + LOCAL) / 100) + LOCAL:1
		;最低でも通常数値の半分まで
		バフ・デバフ補正後数値 = MAX(BATTLE_STATE:ARG:バフ・デバフ種類 / 2, バフ・デバフ補正後数値)
	ELSE
		;敵側
		バフ・デバフ補正後数値 = (敵BATTLE_STATE:(ARG - 10):バフ・デバフ種類 * (100 + LOCAL) / 100) + LOCAL:1
		;最低でも通常数値の半分まで
		バフ・デバフ補正後数値 = MAX(BATTLE_STATE:(ARG - 10):バフ・デバフ種類 / 2, バフ・デバフ補正後数値)
	ENDIF
ELSEIF バフ・デバフ種類 == "連続攻撃率"
	;連撃率はステータスになく、かつDA率TA率と基本的に加算するので基本値を無視して補正値のみ
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{ARG}", ループ用, "バフ対象能力") == "連続攻撃率"
			LOCAL:1 += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL バフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == "連続攻撃率"
			LOCAL:1 -= DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	;処理の関係上、割合を無視して固定値のみ
	バフ・デバフ補正後数値 = LOCAL:1
ELSEIF バフ・デバフ種類 == "与ダメ増加"
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{ARG}", ループ用, "バフ対象能力") == "与ダメ増加"
			LOCAL += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_割合")
			LOCAL:1 += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL バフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	バフ・デバフ補正後数値 = (補正前数値 * (100 + LOCAL) / 100) + LOCAL:1
ELSEIF バフ・デバフ種類 == "与ダメ減少"
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == "与ダメ減少"
			LOCAL += DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_割合")
			LOCAL:1 += DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	IF LOCAL > 99
		;100%以上減少した時、固定値の与ダメ減少も無効化される
		LOCAL = 100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 - LOCAL) / 100) - LOCAL:1
ELSEIF バフ・デバフ種類 == "ダメージ増減"
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"バフデータベース_{ARG}", ループ用, "バフ対象能力") == "ダメージ増減"
			LOCAL += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_割合")
			LOCAL:1 += DT_CELL_GET(@"バフデータベース_{ARG}", ループ用, "バフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL バフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == "ダメージ増減"
			LOCAL -= DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_割合")
			LOCAL:1 -= DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
		ENDIF
	NEXT
	IF LOCAL > 99
		;100%以上カットした時、固定値のダメージ増減も無効化される
		LOCAL = 100
		LOCAL:1 = 0
	ENDIF
	バフ・デバフ補正後数値 = (補正前数値 * (100 - LOCAL) / 100) - LOCAL:1
ELSEIF バフ・デバフ種類 == "暗闇"
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == "暗闇"
			;処理の関係上、固定値を無視して割合のみ
			バフ・デバフ補正後数値 = DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_割合")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
			BREAK
		ENDIF
	NEXT
ELSEIF バフ・デバフ種類 == "最大ＣＴ増加"
	データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{ARG}")
	FOR ループ用, 0, データベース行数
		IF DT_CELL_GETS(@"デバフデータベース_{ARG}", ループ用, "デバフ対象能力") == "最大ＣＴ増加"
			;処理の関係上、割合を無視して固定値のみ
			バフ・デバフ補正後数値 = DT_CELL_GET(@"デバフデータベース_{ARG}", ループ用, "デバフ効果量_固定値")
			IF 観測のみフラグ == 0
				;回数持続の効果の回数を減少
				CALL デバフ回数経過処理(ARG, バフ・デバフ種類)
			ENDIF
			BREAK
		ENDIF
	NEXT
ENDIF

CALL バフ・デバフ測定_特殊補正処理(ARG, バフ・デバフ種類, バフ・デバフ補正後数値)
IF RESULT
	バフ・デバフ補正後数値 = RESULT
ENDIF


RETURN バフ・デバフ補正後数値



@雑魚敵遭遇汎用処理
CALL BATTLE_MAIN_LOOP

IF RESULT == 0
	;勝利時
	RETURN 0
ELSEIF RESULT == 1
	;全滅時
	CALL 口上変数初期化
	KSTR:(K++) = %CALLNAME:PLAYER%は力尽きた仲間たちを連れ、なんとか逃げ出した…
	CALL メッセージ欄表示用関数()
	ダンジョン終了フラグ = 1
	RETURN 1
ELSEIF RESULT == -1
	;逃走時
	RETURN -1
ENDIF

@かばうチェック_味方(ARGS = "")
#DIM ループ用
#DIM データベース行数

FOR LOCAL, 0, 4
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{LOCAL}")
	;まず全体かばうチェック
	IF バフ存在チェック("全体かばう", LOCAL) > -1
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(LOCAL, "全体かばう")
		戦闘行動対象 = LOCAL
		RETURN LOCAL
	ENDIF
	IF ARGS != "全体かばう"
		;単体かばうチェック
		IF バフ存在チェック("単体かばう", LOCAL) > -1
			;回数持続の効果の回数を減少
			CALL バフ回数経過処理(LOCAL, "単体かばう")
			戦闘行動対象 = LOCAL
			RETURN LOCAL
		ENDIF
	ENDIF
NEXT
RETURN -1

@かばうチェック_敵(ARGS)
#DIM ループ用
#DIM データベース行数

FOR LOCAL, 10, 20
	データベース行数 = DT_ROW_LENGTH(@"バフデータベース_{LOCAL}")
	;まず全体かばうチェック
	IF バフ存在チェック("全体かばう", LOCAL) > -1
		;回数持続の効果の回数を減少
		CALL バフ回数経過処理(LOCAL, "全体かばう")
		戦闘行動対象 = LOCAL
		RETURN LOCAL
	ENDIF
	IF ARGS != "全体かばう"
		;単体かばうチェック
		IF バフ存在チェック("単体かばう", LOCAL) > -1
			;回数持続の効果の回数を減少
			CALL バフ回数経過処理(LOCAL, "単体かばう")
			戦闘行動対象 = LOCAL
			RETURN LOCAL
		ENDIF
	ENDIF
NEXT

RETURN -1


@戦闘キャラ名前取得(戦闘キャラ番号)
#FUNCTIONS
#DIM 戦闘キャラ番号

IF 戦闘キャラ番号 < 10
	RETURNF CALLNAME:(BATTLE_STATE:戦闘キャラ番号:0)
ELSE
	RETURNF 敵BATTLE_STATE_STR:(戦闘キャラ番号 - 10):エネミー名
ENDIF



@初期ステータス設定_テンプレート適用(初期ステータスタイプ, ARG)
#DIMS 初期ステータスタイプ

SELECTCASE 初期ステータスタイプ
	CASE "バランス"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 0
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 200
		基礎BATTLE_STATE:ARG:最大ＭＰ = 100
		基礎BATTLE_STATE:ARG:攻撃力 = 100
		基礎BATTLE_STATE:ARG:防御力 = 100
		基礎BATTLE_STATE:ARG:回復力 = 100
		基礎BATTLE_STATE:ARG:行動速度 = 100
		基礎BATTLE_STATE:ARG:DA率 = 10
		基礎BATTLE_STATE:ARG:TA率 = 5
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:回避率 = 5
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "攻撃"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 1
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 180
		基礎BATTLE_STATE:ARG:最大ＭＰ = 120
		基礎BATTLE_STATE:ARG:攻撃力 = 120
		基礎BATTLE_STATE:ARG:防御力 = 80
		基礎BATTLE_STATE:ARG:回復力 = 80
		基礎BATTLE_STATE:ARG:行動速度 = 110
		基礎BATTLE_STATE:ARG:DA率 = 10
		基礎BATTLE_STATE:ARG:TA率 = 5
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 100
		基礎BATTLE_STATE:ARG:回避率 = 5
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "防御"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 2
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 250
		基礎BATTLE_STATE:ARG:最大ＭＰ = 80
		基礎BATTLE_STATE:ARG:攻撃力 = 90
		基礎BATTLE_STATE:ARG:防御力 = 130
		基礎BATTLE_STATE:ARG:回復力 = 110
		基礎BATTLE_STATE:ARG:行動速度 = 90
		基礎BATTLE_STATE:ARG:DA率 = 8
		基礎BATTLE_STATE:ARG:TA率 = 3
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 150
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:回避率 = 0
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "回復"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 3
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 180
		基礎BATTLE_STATE:ARG:最大ＭＰ = 130
		基礎BATTLE_STATE:ARG:攻撃力 = 90
		基礎BATTLE_STATE:ARG:防御力 = 90
		基礎BATTLE_STATE:ARG:回復力 = 130
		基礎BATTLE_STATE:ARG:行動速度 = 120
		基礎BATTLE_STATE:ARG:DA率 = 5
		基礎BATTLE_STATE:ARG:TA率 = 3
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:回避率 = 5
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "サポート"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 4
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 190
		基礎BATTLE_STATE:ARG:最大ＭＰ = 130
		基礎BATTLE_STATE:ARG:攻撃力 = 80
		基礎BATTLE_STATE:ARG:防御力 = 90
		基礎BATTLE_STATE:ARG:回復力 = 110
		基礎BATTLE_STATE:ARG:行動速度 = 135
		基礎BATTLE_STATE:ARG:DA率 = 5
		基礎BATTLE_STATE:ARG:TA率 = 3
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:回避率 = 5
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "連撃"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 5
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 180
		基礎BATTLE_STATE:ARG:最大ＭＰ = 100
		基礎BATTLE_STATE:ARG:攻撃力 = 110
		基礎BATTLE_STATE:ARG:防御力 = 80
		基礎BATTLE_STATE:ARG:回復力 = 80
		基礎BATTLE_STATE:ARG:行動速度 = 130
		基礎BATTLE_STATE:ARG:DA率 = 30
		基礎BATTLE_STATE:ARG:TA率 = 10
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:回避率 = 5
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "回避"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 6
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 200
		基礎BATTLE_STATE:ARG:最大ＭＰ = 100
		基礎BATTLE_STATE:ARG:攻撃力 = 90
		基礎BATTLE_STATE:ARG:防御力 = 80
		基礎BATTLE_STATE:ARG:回復力 = 100
		基礎BATTLE_STATE:ARG:行動速度 = 150
		基礎BATTLE_STATE:ARG:DA率 = 10
		基礎BATTLE_STATE:ARG:TA率 = 5
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 100
		基礎BATTLE_STATE:ARG:命中率 = 90
		基礎BATTLE_STATE:ARG:回避率 = 15
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
	CASE "奥義"
		基礎BATTLE_STATE:ARG:ステータスタイプ保存 = 7
		基礎BATTLE_STATE:ARG:Lv = 1
		基礎BATTLE_STATE:ARG:最大ＨＰ = 200
		基礎BATTLE_STATE:ARG:最大ＭＰ = 100
		基礎BATTLE_STATE:ARG:攻撃力 = 110
		基礎BATTLE_STATE:ARG:防御力 = 90
		基礎BATTLE_STATE:ARG:回復力 = 100
		基礎BATTLE_STATE:ARG:行動速度 = 90
		基礎BATTLE_STATE:ARG:DA率 = 10
		基礎BATTLE_STATE:ARG:TA率 = 5
		基礎BATTLE_STATE:ARG:ゲージ上昇効率 = 100
		基礎BATTLE_STATE:ARG:ゲージ上昇効率_被ダメ時 = 100
		基礎BATTLE_STATE:ARG:ゲージ最大値 = 200
		基礎BATTLE_STATE:ARG:命中率 = 95
		基礎BATTLE_STATE:ARG:クリティカル率 = 0
		基礎BATTLE_STATE:ARG:クリティカルダメージ率 = 150
		基礎BATTLE_STATE:ARG:敵対心 = 100
ENDSELECT
