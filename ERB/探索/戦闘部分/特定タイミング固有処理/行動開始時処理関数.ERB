
@行動前発動効果処理
;戦闘行動キャラで呼ぶため、引数なし
#DIMS 効果種類
#DIM 効果量
#DIM データベース行数
#DIM デバフ番号
#DIM バフ番号

CALL 口上変数初期化

;行動開始時デバフ判定
データベース行数 = DT_ROW_LENGTH(@"デバフデータベース_{戦闘行動キャラ}")
FOR LOCAL:1, 0, データベース行数
	効果種類 = %DT_CELL_GETS(@"デバフデータベース_{戦闘行動キャラ}", LOCAL:1, "デバフ対象能力")%
	IF 効果種類 == "魅了" || 効果種類 == "麻痺" || 効果種類 == "封印"
		;行動不能確率判定
		効果量 = DT_CELL_GET(@"デバフデータベース_{戦闘行動キャラ}", LOCAL:1, "デバフ効果量_割合")
		IF RAND:100 < 効果量
			;行動不能
			行動不能フラグ = 1
			WSTR:(K++) = %戦闘キャラ名前取得(戦闘行動キャラ)%は%DT_CELL_GETS(@"デバフデータベース_{戦闘行動キャラ}", LOCAL:1, "デバフ名")%の効果で行動出来ない！
			CALL メッセージ欄表示用関数(,,,0)
		ENDIF
		;回数消費
	ELSEIF 効果種類 == "混乱"
		WSTR:(K++) = %戦闘キャラ名前取得(戦闘行動キャラ)%は混乱している！
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
		SELECTCASE RAND:2
			CASE 0
				;味方を攻撃
				CALL アビ対象選択テンプレート_味方ランダムＸ体(1)
				アビ汎用変数:効果割合 = 100
				CALL アビテンプレート_ダメージ処理_無属性
			CASE 1
				;敵を攻撃
				CALL アビ対象選択テンプレート_敵ランダムＸ体(1)
				アビ汎用変数:効果割合 = 100
				CALL アビテンプレート_ダメージ処理_無属性
			ENDSELECT
		;回数消費
		CALL デバフ回数経過処理(戦闘行動キャラ, 効果種類)
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
		
		行動不能フラグ = 1
	ENDIF
NEXT

;固有処理

;フィールドを見る
IF 展開中フィールド名格納 != ""
	TRYCCALLFORM 固有行動開始時処理_フィールド_%展開中フィールド名格納%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH
ENDIF


IF 戦闘行動キャラ < 10
	;味方の場合

	;指輪を見る
	TRYCCALLFORM 固有行動開始時処理_指輪_%DT_CELL_GETS("所持指輪データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ番号):装備指輪番号, "指輪名", 1)%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;ジョブ証を見る
	TRYCCALLFORM 固有行動開始時処理_ジョブ証_%DT_CELL_GETS("所持ジョブ証データベース", 装備ステータス補正保存:(BATTLE_STATE:戦闘行動キャラ:キャラ番号):装備証番号, "ジョブ証名", 1)%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;キャラを見る
	TRYCCALLFORM 固有行動開始時処理_キャラ_{NO:(BATTLE_STATE:戦闘行動キャラ:キャラ番号)}()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;バフ・デバフを見る
	FOR バフ番号, 0, DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
		TRYCCALLFORM 固有行動開始時処理_バフ_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%()
			;表示処理
			CALL アビテンプレート用_表示メッセージ変換処理
			SIF K > 0
				CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
		CATCH
		ENDCATCH
	NEXT
	FOR デバフ番号, 0, DT_ROW_LENGTH(@"デバフデータベース_{戦闘行動キャラ}")
		TRYCCALLFORM 固有行動開始時処理_デバフ_%DT_CELL_GETS(@"デバフデータベース_{戦闘行動キャラ}", デバフ番号, "デバフ枠")%()
			;表示処理
			CALL アビテンプレート用_表示メッセージ変換処理
			SIF K > 0
				CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
		CATCH
		ENDCATCH
	NEXT
ELSE
	;敵の場合

	;キャラを見る
	TRYCCALLFORM 固有行動開始時処理_エネミー_%敵BATTLE_STATE_STR:(戦闘行動キャラ - 10):エネミー関数キー%()
		;表示処理
		CALL アビテンプレート用_表示メッセージ変換処理
		SIF K > 0
			CALL メッセージ欄表示用関数(,,,0)
		CALL 口上変数初期化
		CALL アビテンプレ変数リセット
	CATCH
	ENDCATCH

	;バフ・デバフを見る
	FOR バフ番号, 0, DT_ROW_LENGTH(@"バフデータベース_{戦闘行動キャラ}")
		TRYCCALLFORM 固有行動開始時処理_バフ_%DT_CELL_GETS(@"バフデータベース_{戦闘行動キャラ}", バフ番号, "バフ枠")%()
			;表示処理
			CALL アビテンプレート用_表示メッセージ変換処理
			SIF K > 0
				CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
		CATCH
		ENDCATCH
	NEXT
	FOR デバフ番号, 0, DT_ROW_LENGTH(@"デバフデータベース_{戦闘行動キャラ}")
		TRYCCALLFORM 固有行動開始時処理_デバフ_%DT_CELL_GETS(@"デバフデータベース_{戦闘行動キャラ}", デバフ番号, "デバフ枠")%()
			;表示処理
			CALL アビテンプレート用_表示メッセージ変換処理
			SIF K > 0
				CALL メッセージ欄表示用関数(,,,0)
			CALL 口上変数初期化
			CALL アビテンプレ変数リセット
		CATCH
		ENDCATCH
	NEXT
ENDIF
