;-------------------------------------------------
;いわゆるROUND関数判定
;ARG <= ARG:1 <= ARG:2ならば1を、そうでなければ0を返す
;-------------------------------------------------
@CHK_FOCUS(ARG, ARG:1, ARG:2)
#FUNCTION
;SIF CALC_FOCUS(ARG, ARG:1, ARG:2) != ARG:1
;	RETURNF 0
;RETURNF 1
SIF INRANGE(ARG:1, ARG:0, ARG:2)
	RETURNF 1
SIF ARG > ARG:2
	PRINT ARG:0 > ARG:2 エラー
RETURNF 0
;-------------------------------------------------
;いわゆるROUND関数出力
;-------------------------------------------------
@CALC_FOCUS(ARG, ARG:1, ARG:2)
#FUNCTION
SIF ARG >= ARG:1
	RETURNF ARG
SIF ARG	:1 >= ARG:2
	RETURNF ARG:2
RETURNF ARG:1 

;-------------------------------------------------
;与えられた要素の0~ARG番目のうち、何番目が最大の数値か返す（同値なら番手が少ないほうが優先）
;-------------------------------------------------
@MAXFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 11
SIF ARG < 0
	RETURNF 0
要素:10 = MAXARRAY(要素)
FOR LOCAL, 0, ARG
	SIF 要素:LOCAL == 要素:10
		BREAK
NEXT
RETURNF LOCAL-1

;-------------------------------------------------
;与えられた要素の0~ARG番目のうちのうち、何番目が最小の数値か返す（同値なら番手が少ないほうが優先）
;-------------------------------------------------
@MINFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 11
SIF ARG < 0
	RETURNF 0
要素:10 = MINARRAY(要素)
FOR LOCAL, 0, ARG
	SIF 要素:LOCAL == 要素:10
		BREAK
NEXT
RETURNF LOCAL-1

;-------------------------------------------------
;ARGが、与えられた数値間のうちどの範囲に入るかを返す
;(10, 1, 3, 100, 5, 15)とかだと先に3～100に反応して1を返す
;-------------------------------------------------
@RANGEFIND(ARG, 要素:0, 要素:1, 要素:2, 要素:3, 要素:4, 要素:5, 要素:6, 要素:7, 要素:8, 要素:9)
#FUNCTION
#DIM DYNAMIC 要素, 10
FOR LOCAL, 0, 9
	SIF INRANGE(ARG, 要素:LOCAL, 要素:(LOCAL+1))
		BREAK
NEXT
RETURNF LOCAL-1

@滞在キャラ数算出関数(ARG = 0)
#FUNCTION
;モブ、ネームド観光客など全部ひっくるめた数の算出

SELECTCASE ARG
	CASE 0
		;お金払って滞在中人数
		RETURNF モブ観光客数 + 滞在キャラ数
	CASE 1
		;純粋にリゾートに存在する人数
		LOCAL:1 = 0
		FOR LOCAL, 1, CHARANUM
			SIF CFLAG:LOCAL:滞在期間 > 0
				LOCAL:1 += 1
		NEXT
		RETURNF LOCAL:1 + モブ観光客数
	CASE 2
		;雑務ゲージ用
		;現在起きてる＋リゾートにいる人数
		LOCAL:1 = 0
		FOR LOCAL, 1, CHARANUM
			SIF CFLAG:LOCAL:滞在期間 < 0
				CONTINUE
			SIF CFLAG:LOCAL:現在マップ種別 != 0
				CONTINUE
			SIF CFLAG:LOCAL:睡眠
				CONTINUE
			LOCAL:1 += 1
		NEXT
		;０時～７時はモブ寝てる
		IF TIME > 420
			LOCAL:1 += モブ観光客数
		ENDIF
		RETURNF LOCAL:1
ENDSELECT

@陥落チェック(ARG)
#FUNCTION
IF TALENT:ARG:恋慕
	RETURNF 1
ELSEIF TALENT:ARG:セフレ
	RETURNF 2
ELSE
	RETURNF 0
ENDIF

@従業員人数チェック()

従業員人数 = 0
FOR LOCAL,1,CHARANUM
	IF TALENT:LOCAL:従業員
		従業員人数 += 1
	ENDIF
NEXT

RETURN 従業員人数


@ドロップ判定処理(ドロップ確率, 入手アイテム名)
#DIM ドロップ確率
#DIMS 入手アイテム名
#DIM データベース行数
#DIMS 入手アイテム種別

入手アイテム種別 = 
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 入手アイテム名
		入手アイテム種別 = 素材
		BREAK
	ENDIF
NEXT
IF 入手アイテム種別 == ""
	ENUMFUNCBEGINSWITH @"アイテム個別文章表示_%入手アイテム名%"
	IF RESULT > 0
		入手アイテム種別 = 探索アイテム
	ENDIF
ENDIF
IF 入手アイテム種別 == ""
	ENUMFUNCBEGINSWITH @"指輪ステータス決定_%入手アイテム名%"
	IF RESULT > 0
		入手アイテム種別 = 指輪
	ENDIF
ENDIF
IF 入手アイテム種別 == ""
	ENUMFUNCBEGINSWITH @"耳飾りステータス決定_%入手アイテム名%"
	IF RESULT > 0
		入手アイテム種別 = 耳飾り
	ENDIF
ENDIF
;他、必要な種別があればここに増やしていく

IF 入手アイテム種別 == ""
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	FORCEWAIT
ENDIF

LOCAL = RAND:100

IF 確定ドロップフラグ
	LOCAL = 0
ENDIF

IF LOCAL < ドロップ確率
	IF ダンジョン表示モード != ""
		;ダンジョン内、っていうか戦闘中ドロップ表示
		WSTR:(K++) = %入手アイテム名%を手に入れた！
	ELSE
		;非戦闘中、つまり自動探索ドロップ
		IF MAP_HAS("自動探索ドロップ", 入手アイテム名)
			MAP_SET "自動探索ドロップ", 入手アイテム名, @"{TOINT(MAP_GET("自動探索ドロップ", 入手アイテム名)) + 1}"
		ELSE
			MAP_SET "自動探索ドロップ", 入手アイテム名, "1"
		ENDIF
	ENDIF
	SELECTCASE 入手アイテム種別
		CASE "素材"
			CALL 素材入手処理(入手アイテム名, 1)
		CASE "探索アイテム"
			CALL アイテム増減汎用処理(入手アイテム名, 1)
		CASE "指輪"
			CALL 汎用指輪取得処理(入手アイテム名, ドロップ質の良さ)
		CASE "耳飾り"
			CALL 汎用耳飾り取得処理(入手アイテム名)
	ENDSELECT
ENDIF
ドロップ質の良さ = 0

@素材入手処理(入手アイテム名, 入手数 = 1, 累計入手無効フラグ = 0)
#DIMS 入手アイテム名
#DIM 入手数
#DIM 累計入手無効フラグ

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 入手アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	LOCAL:1 = DT_CELL_GET("所持素材データベース", COUNT - 1, "所持素材数")
	DT_CELL_SET "所持素材データベース", COUNT - 1, "所持素材数", LOCAL:1 + 入手数
	IF 累計入手無効フラグ == 0
		;無効でない限り、累計入手素材数を計上
		LOCAL:1 = DT_CELL_GET("所持素材データベース", COUNT - 1, "累計入手素材数")
		DT_CELL_SET "所持素材データベース", COUNT - 1, "累計入手素材数", LOCAL:1 + 入手数
	ENDIF
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
	PRINTL
ENDIF

@素材消費処理(消費アイテム名, 消費数 = 1)
#DIMS 消費アイテム名
#DIM 消費数

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 消費アイテム名
		LOCAL:1 = 1
		LOCAL = COUNT
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	LOCAL:1 = MAX(0, DT_CELL_GET("所持素材データベース", LOCAL, "所持素材数") - 消費数)
	DT_CELL_SET "所持素材データベース", LOCAL, "所持素材数", LOCAL:1
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
	PRINTL
ENDIF

@素材アイテム_数値データ取得(取得データ名, 判定アイテム名)
#FUNCTION
#DIMS 取得データ名
#DIMS 判定アイテム名

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 判定アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	RETURNF DT_CELL_GET("所持素材データベース", COUNT - 1, 取得データ名)
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
ENDIF

@素材アイテム_文字列データ取得(取得データ名, 判定アイテム名)
#FUNCTIONS
#DIMS 取得データ名
#DIMS 判定アイテム名

VARSET LOCAL
FOR COUNT, 0, DT_ROW_LENGTH("所持素材データベース")
	IF DT_CELL_GETS("所持素材データベース", COUNT, "素材アイテム名") == 判定アイテム名
		LOCAL:1 = 1
		BREAK
	ENDIF
NEXT
IF LOCAL:1
	RETURNF DT_CELL_GETS("所持素材データベース", COUNT - 1, 取得データ名)
ELSE
	PRINTL
	PRINTL
	PRINTL
	PRINTL
	PRINTL アイテム名が不正です。制作者に連絡してください。
	PRINTL
	PRINTL
	PRINTL
ENDIF

;-------------------------------------------------
;時刻をもらって時間(hour)の文字列を返す式中関数
;IS_HALFが0の場合, 0時間以上9時間以下の場合は全角, 10時間以上の場合は半角で返す
;IS_HALFが非0の場合, 半角で返す
;例: CONVERT_HOURS(599) = ９, CONVERT_HOURS(600) = 10
;-------------------------------------------------
@CONVERT_HOURS(MINITES, IS_HALF = 0)
#FUNCTIONS
#DIM MINITES
#DIM IS_HALF
#DIM HOURS
HOURS = MINITES/60
RETURNF ((0 <= HOURS && HOURS <= 9) || IS_HALF) ? TOFULL(TOSTR(HOURS)) # TOSTR(HOURS)

;-------------------------------------------------
;ARG番のキャラに男性器があるかどうかを返す関数
;-------------------------------------------------
@HAS_PENIS(ARG)
#FUNCTION
RETURNF GETBIT(TALENT:ARG:性別, 1)

;-------------------------------------------------
;ARG番のキャラに女性器があるかどうかを返す関数
;-------------------------------------------------
@HAS_VAGINA(ARG)
#FUNCTION
RETURNF GETBIT(TALENT:ARG:性別, 0)

;-------------------------------------------------
;ARG番のキャラがベースとして男扱いなら1を返す関数
;-------------------------------------------------
@IS_MALE(ARG)
#FUNCTION
RETURNF !IS_FEMALE(ARG)

;-------------------------------------------------
;ARG番のキャラがベースとして女扱いなら1を返す関数
;-------------------------------------------------
@IS_FEMALE(ARG)
#FUNCTION
RETURNF HAS_VAGINA(ARG)

;-------------------------------------------------
;ARG番のキャラとARG:1番のキャラが同じ部屋/空間にいるなら1を返す関数
;-------------------------------------------------
@IS_SAME_ROOM(ARG, ARG:1 = -1)
#FUNCTION
SIF ARG:1 == -1
	ARG:1 = PLAYER
RETURNF CFLAG:ARG:現在位置 == CFLAG:(ARG:1):現在位置 && CFLAG:ARG:現在マップ種別 == CFLAG:(ARG:1):現在マップ種別

;-------------------------------------------------
;部位をARG番のキャラの感度と敏感で重み付けてランダムに返す関数
;現状では使いづらいので部位_Ｓは返さない
;IS_MALE(ARG)の時は部位_Ｖと部位_Ｂは返さない
;Ｖ,Ａ未経験の時はそれぞれ部位_Ｖと部位_Ａは返さない
;-------------------------------------------------
@RANDOM_PART(ARG)
#FUNCTION
#DIM 部位嗜好, 4
#DIM 総和
#DIM 選好

;全部位無い場合は戻す
SIF MAX(TALENT:ARG:Ｂ感度, TALENT:ARG:Ａ感度, TALENT:ARG:Ｃ感度, TALENT:ARG:Ｖ感度) == -2
	RETURNF -1

FOR LOCAL, 0, 4
	部位嗜好:LOCAL = MAX(1, ABL:ARG:LOCAL + TALENT:ARG:(LOCAL + 部位感度))
	SIF TALENT:ARG:(LOCAL + 部位感度) == -2
		部位嗜好:LOCAL = 0
	総和 += 部位嗜好:LOCAL
NEXT

$CHECK

IF IS_MALE(ARG)
	総和 -= 部位嗜好:部位_Ｖ + 部位嗜好:部位_Ｂ
	部位嗜好:部位_Ｖ = 0
	部位嗜好:部位_Ｂ = 0
ENDIF
IF !EXP:ARG:Ｖ経験
	総和 -= 部位嗜好:部位_Ｖ
	部位嗜好:部位_Ｖ = 0
ENDIF
IF !EXP:ARG:Ａ経験
	総和 -= 部位嗜好:部位_Ａ
	部位嗜好:部位_Ａ = 0
ENDIF
IF TALENT:ARG:Ｂ感度 == -2
	総和 -= 部位嗜好:部位_Ｂ
	部位嗜好:部位_Ｂ = 0
ENDIF
IF TALENT:ARG:Ａ感度 == -2
	総和 -= 部位嗜好:部位_Ａ
	部位嗜好:部位_Ａ = 0
ENDIF
IF TALENT:ARG:Ｖ感度 == -2
	総和 -= 部位嗜好:部位_Ｖ
	部位嗜好:部位_Ｖ = 0
ENDIF
IF TALENT:ARG:Ｃ感度 == -2
	総和 -= 部位嗜好:部位_Ｃ
	部位嗜好:部位_Ｃ = 0
ENDIF


IF 総和 == 0
	FOR LOCAL, 0, 4
		部位嗜好:LOCAL = 1
		総和 += 1
	NEXT
	GOTO CHECK
ENDIF

選好 = RAND(総和) + 1
FOR LOCAL, 0, 4
	SIF 部位嗜好:LOCAL < 1
		CONTINUE
	SIF 選好 >= 総和
		RETURNF LOCAL
	総和 -= 部位嗜好:LOCAL
NEXT

;-------------------------------------------------
;ARGS中の、最初のARGS:1の後ろをARG:2文字あけた文字列を返す関数
;-------------------------------------------------
@ADD_STR_SPACE(ARGS, ARGS:1, ARG:2 = 1)
#FUNCTIONS

LOCAL = STRFIND(ARGS, ARGS:1) 
IF LOCAL > 0
	LOCALS = %SUBSTRING(ARGS, 0, LOCAL + 1), LOCAL + 1 + ARG:2,LEFT%
	LOCALS += @"%SUBSTRING(ARGS, 1 + LOCAL, STRLENS(ARGS))%"
	RETURNF LOCALS
ENDIF

RETURNF ARGS

@料理セット判定(ARGS)
#FUNCTION

FOR LOCAL, 1, 6
	SIF DT_CELL_GETS("料理メニューデータベース",  現在設定メニュー:LOCAL, "メニュー名", 1) == ARGS
		RETURNF 1
NEXT

RETURNF 0


@DB_idから行数取得(データベース名, id番号)
#FUNCTION
#DIMS データベース名
#DIM id番号

FOR LOCAL, 0, DT_ROW_LENGTH(データベース名)
	IF DT_CELL_GET(データベース名, LOCAL, "id") == id番号
		RETURNF LOCAL
	ENDIF
NEXT

@恋慕_恋心比較(対象キャラ)
#FUNCTION
#DIM 対象キャラ
#DIM 恋心_好感度レベル

FOR 恋心_好感度レベル, 0, 100
	IF 経験値テーブル:恋心_好感度レベル >= CFLAG:対象キャラ:恋心度
		BREAK
	ENDIF
NEXT

RETURNF MAX(CFLAG:対象キャラ:恋慕レベル, 恋心_好感度レベル)

@恋慕_性愛比較(対象キャラ)
#FUNCTION
#DIM 対象キャラ
#DIM 性愛_好感度レベル

FOR 性愛_好感度レベル, 0, 100
	IF 経験値テーブル:性愛_好感度レベル >= CFLAG:対象キャラ:性愛度
		BREAK
	ENDIF
NEXT

RETURNF MAX(CFLAG:対象キャラ:恋慕レベル, 性愛_好感度レベル)


@うふふ終了処理
#DIM EXP番号
#DIM 分身並べ替え基準, 5
#DIM 時間保存

FOR LOCAL, 0, CHARANUM
	SIF TARGET:LOCAL < 1
		BREAK
	IF CFLAG:(TARGET:LOCAL):うふふ
		;うふふ終了口上
		TRYCALLFORM KOJO_EVENT_うふふ終了_{NO:(TARGET:LOCAL)}(TARGET:LOCAL)

		;うふふ時間で履歴登録
		時間保存 = (TIME + 1440 * DAY) - CFLAG:(TARGET:LOCAL):うふふ開始時間記録
		IF 時間保存 > 300 && CFLAG:(TARGET:LOCAL):うふふ開始時間記録 > 0
			CALL 履歴データベース登録(CFLAG:MASTER:人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>%CALLNAME:(TARGET:LOCAL)%と%TOFULL(TOSTR(時間保存 / 60))%時間%TOFULL(TOSTR(時間保存 % 60))%分えっちした</font><img src='えっちハート'>","うふふ")
			CALL 履歴データベース登録(CFLAG:(TARGET:LOCAL):人物番号, @"<font color='#%カラーパレット_HTML("薄ピンク")%'>%CALLNAME:MASTER%と%TOFULL(TOSTR(時間保存 / 60))%時間%TOFULL(TOSTR(時間保存 % 60))%分えっちした</font><img src='えっちハート'>","うふふ")
		ENDIF
	ENDIF
	CFLAG:(TARGET:LOCAL):うふふ = 0
	CFLAG:(TARGET:LOCAL):うふふ開始時間記録 = 0
	CALL 性欲ゲージ減少処理(TARGET:LOCAL)
	TCVAR:(TARGET:LOCAL):初うふふフラグ = 0
	;モードもリセット
	CALL 特定キャラモードリセット(TARGET:LOCAL)
	IF CSTR:(TARGET:LOCAL):コスプレ前の服 != ""
		CALL CLOTHES_RESET(TARGET:LOCAL)
		CSTR:(TARGET:LOCAL):コスプレ前の服 '= ""
	ENDIF
	;体力限界時処理
	IF CFLAG:(TARGET:LOCAL):体力限界
		CALL CHARA_SLEEP, TARGET:LOCAL
		CFLAG:(TARGET:LOCAL):飲み会 = 0
	ENDIF
	;オートコマンド履歴をリセット
	CSTR:(TARGET:LOCAL):オートコマンド履歴０ = 
	CSTR:(TARGET:LOCAL):オートコマンド履歴１ = 
	CSTR:(TARGET:LOCAL):オートコマンド履歴２ = 
	CSTR:(TARGET:LOCAL):オートコマンド履歴３ = 
	CSTR:(TARGET:LOCAL):オートコマンド履歴４ = 
NEXT
CFLAG:PLAYER:うふふ = 0
連れ込みパターン = 
;オートコマンドもリセット
TFLAG:オートコマンドフラグ = 0
AUTOCOM_相手番号保存 = 0
CALL TURN_RESET
;同時モードもリセット
FLAG:モード管理 = 0
同時モード_選択数 = 0
VARSET 同時モード_選択キャラ, -1

;分身を消す
;降順に並べないとDELでキャラ番号がズレるのでまずソート
VARSET 分身並べ替え基準
FOR LOCAL, 0, 分身最大数
	分身並べ替え基準:LOCAL = 分身登録:LOCAL:0 * -1
NEXT
ARRAYMSORT 分身並べ替え基準, 分身登録, 分身EXP保存
FOR LOCAL, 0, 分身最大数
	SIF 分身登録:LOCAL:0 < 1
		CONTINUE
	FOR EXP番号, 0, 200
		EXP:(分身登録:LOCAL:1):EXP番号 += EXP:(分身登録:LOCAL:0):EXP番号 - 分身EXP保存:LOCAL:EXP番号
	NEXT
	DELCHARA 分身登録:LOCAL:0
NEXT
VARSET 分身登録:0:0
VARSET 分身EXP保存:0:0
CALL SORT_CFLAG(21)

@飲み会終了処理

FOR LOCAL, 0, CHARANUM
	SIF TARGET:LOCAL < 1
		BREAK
	CFLAG:(TARGET:LOCAL):飲み会 = 0
	;モードもリセット
	CALL 特定キャラモードリセット(TARGET:LOCAL)
	IF CSTR:(TARGET:LOCAL):コスプレ前の服 != ""
		CALL CLOTHES_RESET(TARGET:LOCAL)
		CSTR:(TARGET:LOCAL):コスプレ前の服 '= ""
	ENDIF
NEXT
CFLAG:PLAYER:飲み会 = 0


@MAXRAND(要素:0 = -999, 要素:1 = -999, 要素:2 = -999, 要素:3 = -999, 要素:4 = -999, 要素:5 = -999, 要素:6 = -999, 要素:7 = -999, 要素:8 = -999, 要素:9 = -999)
;要素の中で最大の値を返す
;最大の値が複数あるのならばランダムでそのうちのどれかを返す、１０個まで
#FUNCTION
#DIM 要素, 10
#DIM ランダム候補, 10
#DIM ランダム番号
#DIM 最大値
#DIM 最大値順番

VARSET ランダム候補, -1
ランダム番号 = 0
最大値 = -999
FOR LOCAL, 0, 10
	IF 要素:LOCAL > 最大値
		最大値 = 要素:LOCAL
		最大値順番 = LOCAL
		VARSET ランダム候補, -1
		ランダム番号 = 0
		ランダム候補:ランダム番号 = LOCAL
		ランダム番号 += 1
	ELSEIF 要素:LOCAL == 最大値
		ランダム候補:ランダム番号 = LOCAL
		ランダム番号 += 1
	ENDIF
NEXT

IF ランダム番号 == 1
	RETURNF 最大値順番
ELSEIF ランダム番号 > 1
	RETURNF ランダム候補:(RAND:ランダム番号)
ELSE
	RETURNF -1
ENDIF


@キャラ一致チェック(対象キャラ, キャラNAME)
#FUNCTION
#DIM 対象キャラ
#DIMS キャラNAME

;対象キャラのNOが指定NAMEのNOと一致するなら１を返す
RETURNF CSVNAME(NO:対象キャラ) == キャラNAME


@キャラ検索(キャラNAME)
#FUNCTION
#DIM 対象キャラ
#DIMS キャラNAME

FOR 対象キャラ, 0, CHARANUM
    SIF キャラ一致チェック(対象キャラ, キャラNAME)
        RETURNF 対象キャラ
NEXT
RETURNF -1
